<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learn Shortcuts</title>
    <link>https://kilpkonn.github.io/learn-shortcuts/</link>
    <description>Recent content on Learn Shortcuts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://kilpkonn.github.io/learn-shortcuts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Week 0</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-00/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-00/</guid>
      <description>Starting point #  This is a short chapter to describe starting point.
Before starting you should have:
 basic experience with neovim (I had ~5 months as neovim as my main editor but also less is sufficient for sure) know basic movement, editing and similar in vim. know very basics of lua (for config)  Some random tips #  Make neovim your default editor
# .zshenv export EDITOR=&amp;#34;nvim&amp;#34; Add alias to launch neovim faster</description>
    </item>
    
    <item>
      <title>Week 1</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-01/</guid>
      <description>Replace in range #  Sometimes we wish to replace strings only in some range, not at file at a time. Here are some tims to accomplish that.
Replace in visually seleceted range #   Select range in visual mode Press &amp;lt;:&amp;gt; to start range action, you should see something like this:  :&amp;#39;&amp;lt;,&amp;#39;&amp;gt;Type in replace command as usual eg. for foo -&amp;gt; bar  :&amp;#39;&amp;lt;,&amp;#39;&amp;gt;s/foo/bar/gReplace last visually selected range in normal mode #   Select range in visual mode Exit to normal mode Start command with &amp;lt;:&amp;gt; as usual Use \%V to restrict selection to previously selected visual range.</description>
    </item>
    
    <item>
      <title>Week 10</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-10/</guid>
      <description>Registers 3 #  We finish with registers by looking at:
 Black hole register Last selection register Last search register  The black hole register #   &amp;quot;_ &amp;lt;- the name When writing to it, nothing happens Can be used to delete text without affecting other registers Reading it returns nothing Can be used for clearing other registers  Last selection registers #  Keys: &amp;quot;+ and &amp;quot;* Useful for operating with system clipboard.</description>
    </item>
    
    <item>
      <title>Week 11</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-11/</guid>
      <description>Vim Marks #  Marks allow storying corrent location and returning to it later. There are generally 3 types of marks lowercase marks, uppercase marks and special marks. Marks can be added with m&amp;lt;letter&amp;gt; in normal mode for example ma. The mark stores both the line and column information.
Lowercase marks #  These are marks for a-z. Lowercase marks are local to a file meaning multiple files can have say mark &#39;a.</description>
    </item>
    
    <item>
      <title>Week 12</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-12/</guid>
      <description>More on Marks #  We learned some basics of vim marks last week. Now we can take a look at some more advanced commands.
Movement #  Here are some more options to move around marks.
]&amp;#39; - jump to next line with a lowercase mark[&amp;#39; - jump to previous line with a lowercase mark]` - jump to next lowercase mark[` - jump to previous lowercase markNote: You can use count with all the commands above, for example 5[&#39; works.</description>
    </item>
    
    <item>
      <title>Week 13</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-13/</guid>
      <description>Buffers #  Vim buffers are something you can think of as opened files. Some of them are readonly and do not correspond to actual files (eg. Nvimtree), but it still is something that makes thinking of them easier.
A buffer can be opened in multiple windows in which case if you edit it in one window, the changes also appear in the other.
Basic commands #  You can view the contents of buffers with :buffers or :ls.</description>
    </item>
    
    <item>
      <title>Week 14</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-14/</guid>
      <description>QuickFix lists #  Whilst the name seems new, some of QuickFix lists usecases are quite common. r example it is used when vimgrepping a pattern and then jumping between entries found. Local QuickFix lists can be used for code errors and warnings.
Viewving and navigating QuickFix list #  QuickFix list can be viewed with :copen or :lopen command depending on if you want global or local list. Navigation can be done with :cnext and :cprev or :lnext and :lprev respectively.</description>
    </item>
    
    <item>
      <title>Week 15</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-15/</guid>
      <description>Makeprg #  A big part of programming is compiling files and running them. Whilst editing parts of code usually it is a good idea to sometimes build the project to see if everything works fine. This can be done also in vim without exiting it.
Make and makeprg #  To build a program you can run :make. As You might have guessed the default build system is GNU Make.</description>
    </item>
    
    <item>
      <title>Week 2</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-02/</guid>
      <description>The &amp;lsquo;g&amp;rsquo; command #  It is quite common to wish to run some specific command on every line containing a pattern. This is exactly what the &amp;lsquo;g&amp;rsquo; command is for.
Syntax #  The &amp;lsquo;g&amp;rsquo; command is executed in command mode and the syntax is following:
:g/pattern/commandAlso the inverse is possible (run command on lines that do not match)
:g!/pattern/commandor
:v/pattern/commandExamples #  Delete all lines containing pattern #  :g/foo/dDelete all empty lines #  :g/^\s*$/dMove imports to start of file #  :g/import/m0Capitalize all lines not containig bar #  :v/bar/normal gUU</description>
    </item>
    
    <item>
      <title>Week 3</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-03/</guid>
      <description>Working on long lines #  Sometimes lines are so long that they do not fit onto screen. It is inportant to know how to split line to multiple or sometimes merge into single in these cases.
Movement #  This is how to move on wrapped lines as if they were multiple lines
gj - downgk - upg$ - end of a visual lineg0 - beginning of a visual lineSplit to multiple lines #  To split single line (or any other text object) to multiple lines gq followed by a motion can be used.</description>
    </item>
    
    <item>
      <title>Week 4</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-04/</guid>
      <description>Opening files #  Here are some tips for opening files with vim.
Open file with nvim #  The most basic way is to open files when opening vim.
nvim [-o] /path/to/file.txt -o Can be used to open each file in sepparate window or you can specify amount of windows with it as -o 4
Open width :edit / :view command #  To edit
:e /path/to/file.txtView only mode</description>
    </item>
    
    <item>
      <title>Week 5</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-05/</guid>
      <description>Opening files #  More tips for opening files incoming.
Open multiple files from inside vim #  Similarly to passing wildcards to arguments when opening vim with files you can open multiple files from inside vim. This can be acieved with :ar[gs] &amp;lt;pattern&amp;gt; command.
For example all .cpp files is src can be opened with
:args src/**/*.cppNvim Tree #  Another very useful option is to use kyazdani42/nvim-tree (or something similar).</description>
    </item>
    
    <item>
      <title>Week 6</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-06/</guid>
      <description>Macros #  It is quite often that we want to repeat some combination of actions multiple times&amp;hellip; And thats exactly what macros are for :D.
Recording a macro #  Recording macro is started with pressing q in normal mode followed by macro name (any lowercase letter). Recording macro can be stopped with pressing q again.
qa # Record macro named &amp;#34;a&amp;#34;# perform actionsqPlaying macros #  Macro can me played with @{macro-name}.</description>
    </item>
    
    <item>
      <title>Week 7</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-07/</guid>
      <description>Registers #  Sometomes you copy a thing.. and then you copy another thing.. but now you want to paste the first one. This is what vim registers are for :D
Different types of registers #   Unnamed register &amp;quot;&amp;quot; 10 numbered registers &amp;quot;0..9 The small delete register &amp;quot;- 26 named registers &amp;quot;a..z Three read-only registers &amp;quot;., &amp;quot;%, : Alternate buffer register &amp;quot;# The expression register &amp;quot;= The black hole register &amp;quot;_ The last selection registers &amp;quot;* and &amp;quot;+ Last search pattern register &amp;quot;/  Viewing registers #  Show all registers</description>
    </item>
    
    <item>
      <title>Week 8</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-08/</guid>
      <description>Registers 1 #  We continue with registers by looking at:
 10 numbered registers &amp;quot;0..9 The small delete register &amp;quot;- 26 named registers &amp;quot;a..z  Numbered registers #   &amp;quot;0 has the last yank &amp;quot;1 has the last delete (d, c, s, x) &amp;quot;2..9 have previous deletes  Side note
Note that %, (), /, n and N (and maybe some more) dont got to delete registers.  Small delete register #  This register contains the deletes that delete less than one line.</description>
    </item>
    
    <item>
      <title>Week 9</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-09/</guid>
      <description>Registers 2 #  We continue with registers by looking at:
 Three read-only registers &amp;quot;., &amp;quot;%, : Alternate file register &amp;quot;# The expression register &amp;quot;=  Readonly registers #   &amp;quot;. Last insert mode &amp;quot;% Current file name &amp;quot;: Last Command  Some tips to go with current filename:
%:p -&amp;gt; Make filename full path%:h -&amp;gt; Head of the filename%:t -&amp;gt; Tail of the filename%:r -&amp;gt; Root%:e -&amp;gt; ExtensionAlternate file register #  Register can be accessed via &amp;quot;#.</description>
    </item>
    
  </channel>
</rss>

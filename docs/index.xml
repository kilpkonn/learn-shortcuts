<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learn Shortcuts</title>
    <link>https://kilpkonn.github.io/learn-shortcuts/</link>
    <description>Recent content on Learn Shortcuts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://kilpkonn.github.io/learn-shortcuts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Week 0</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-00/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-00/</guid>
      <description>Starting point # This is a short chapter to describe starting point.
Before starting you should have:
basic experience with neovim (I had ~5 months as neovim as my main editor but also less is sufficient for sure) know basic movement, editing and similar in vim. know very basics of lua (for config) Some random tips # Make neovim your default editor
# .zshenv export EDITOR=&amp;#34;nvim&amp;#34; Add alias to launch neovim faster</description>
    </item>
    
    <item>
      <title>Week 1</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-01/</guid>
      <description> Identity filter # Identity filter is the simplest filter there is as it basically just returns the input. Identity filter is specified as ..
Example # echo &amp;#39;{ &amp;#34;a&amp;#34;: 1, &amp;#34;b&amp;#34;: true }&amp;#39; | jq &amp;#39;.&amp;#39; </description>
    </item>
    
    <item>
      <title>Week 1</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-01/</guid>
      <description>Replace in range # Sometimes we wish to replace strings only in some range, not at file at a time. Here are some tims to accomplish that.
Replace in visually seleceted range # Select range in visual mode Press &amp;lt;:&amp;gt; to start range action, you should see something like this: :&amp;#39;&amp;lt;,&amp;#39;&amp;gt; Type in replace command as usual eg. for foo -&amp;gt; bar :&amp;#39;&amp;lt;,&amp;#39;&amp;gt;s/foo/bar/g Replace last visually selected range in normal mode # Select range in visual mode Exit to normal mode Start command with &amp;lt;:&amp;gt; as usual Use \%V to restrict selection to previously selected visual range.</description>
    </item>
    
    <item>
      <title>Week 10</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-10/</guid>
      <description>Registers 3 # We finish with registers by looking at:
Black hole register Last selection register Last search register The black hole register # &amp;quot;_ &amp;lt;- the name When writing to it, nothing happens Can be used to delete text without affecting other registers Reading it returns nothing Can be used for clearing other registers Last selection registers # Keys: &amp;quot;+ and &amp;quot;* Useful for operating with system clipboard. In case you do not like it you can use the clipboard for all operations</description>
    </item>
    
    <item>
      <title>Week 11</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-11/</guid>
      <description>Vim Marks # Marks allow storying corrent location and returning to it later. There are generally 3 types of marks lowercase marks, uppercase marks and special marks. Marks can be added with m&amp;lt;letter&amp;gt; in normal mode for example ma. The mark stores both the line and column information.
Lowercase marks # These are marks for a-z. Lowercase marks are local to a file meaning multiple files can have say mark &#39;a.</description>
    </item>
    
    <item>
      <title>Week 12</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-12/</guid>
      <description>More on Marks # We learned some basics of vim marks last week. Now we can take a look at some more advanced commands.
Movement # Here are some more options to move around marks.
]&amp;#39; - jump to next line with a lowercase mark [&amp;#39; - jump to previous line with a lowercase mark ]` - jump to next lowercase mark [` - jump to previous lowercase mark Note: You can use count with all the commands above, for example 5[&#39; works.</description>
    </item>
    
    <item>
      <title>Week 13</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-13/</guid>
      <description>Buffers # Vim buffers are something you can think of as opened files. Some of them are readonly and do not correspond to actual files (eg. Nvimtree), but it still is something that makes thinking of them easier.
A buffer can be opened in multiple windows in which case if you edit it in one window, the changes also appear in the other.
Basic commands # You can view the contents of buffers with :buffers or :ls.</description>
    </item>
    
    <item>
      <title>Week 14</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-14/</guid>
      <description>QuickFix lists # Whilst the name seems new, some of QuickFix lists usecases are quite common. r example it is used when vimgrepping a pattern and then jumping between entries found. Local QuickFix lists can be used for code errors and warnings.
Viewving and navigating QuickFix list # QuickFix list can be viewed with :copen or :lopen command depending on if you want global or local list. Navigation can be done with :cnext and :cprev or :lnext and :lprev respectively.</description>
    </item>
    
    <item>
      <title>Week 15</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-15/</guid>
      <description>Makeprg # A big part of programming is compiling files and running them. Whilst editing parts of code usually it is a good idea to sometimes build the project to see if everything works fine. This can be done also in vim without exiting it.
Make and makeprg # To build a program you can run :make. As You might have guessed the default build system is GNU Make. However you can use different build systems via :set makeprg.</description>
    </item>
    
    <item>
      <title>Week 16</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-16/</guid>
      <description>Compiler plugins # Compiler plugins are something that allow automating steps described in previous week. You can pretty much set the :makeprg and :efm based on filetype.
Writing plugin # Compiler plugins are stored in compiler/ subdirecotory so ~/.config/nvim/compiler/ for nvim. You can write them both in vim and lua.
Example plugin written in vim:
if exists(&amp;#34;current_compiler&amp;#34;) | finish | endif &amp;#34; Needed to avoid running multiple times let current_compiler = &amp;#34;zsh&amp;#34; if exists(&amp;#34;:CompilerSet&amp;#34;) !</description>
    </item>
    
    <item>
      <title>Week 17</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-17/</guid>
      <description>Set and let # Since day one, everybody know vim has :set command to set options. There also seems to be a :let command which in a way is similar, but it&amp;rsquo;s also quite different.
Set command # Set is command for setting vim options. Here are some things you can do with it.
:verbose set &amp;#34;show all options :set tw=40 &amp;#34;set option (text width to 40) :set wrap&amp;amp; &amp;#34;set default option (to wrap) :set nowrap &amp;#34;unset option :set wrap!</description>
    </item>
    
    <item>
      <title>Week 18</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-18/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-18/</guid>
      <description>More on navigation # hjkl is nice and some stuff such as 0 and $ give extra touch, but there is much more available in vim. In this week we&amp;rsquo;ll come some of the options I&amp;rsquo;ve personally rarely used, but which can be very useful.
Move to next occurance # One way to skip couple of keystrokes is to jump around with f followed by a letter you want to jump to.</description>
    </item>
    
    <item>
      <title>Week 19</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-19/</guid>
      <description>More on inserting and deleting # How to insert and delete text are some of the first things you have to learn in vim, but there are also more &amp;ldquo;advanced&amp;rdquo; ways to do it or just cool shortcuts for it.
Start inserting on new line # The o key can be used to start inserting text to newline just below the cursor. The capital O does the same, but start inserting to a line above.</description>
    </item>
    
    <item>
      <title>Week 2</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-02/</guid>
      <description> Object identifier index # Object identifier filter is the most basic non-trivial filter there is (well, along array index). The syntax is .foo, &#39;.foo.bar, .&amp;quot;123foo&amp;quot;, .&amp;quot;foo::bar&amp;quot; or .[&amp;quot;foo&amp;quot;]. The filter takes object and returns value at the key specified or null otherwise.
Example # echo &amp;#39;{ &amp;#34;a&amp;#34;: 1, &amp;#34;b&amp;#34;: true }&amp;#39; | jq &amp;#39;.a&amp;#39; # Outout: 1 echo &amp;#39;{ &amp;#34;a&amp;#34;: 1, &amp;#34;b&amp;#34;: true }&amp;#39; | jq &amp;#39;.[&amp;#34;b&amp;#34;]&amp;#39; # Outout: true </description>
    </item>
    
    <item>
      <title>Week 2</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-02/</guid>
      <description> The &amp;lsquo;g&amp;rsquo; command # It is quite common to wish to run some specific command on every line containing a pattern. This is exactly what the &amp;lsquo;g&amp;rsquo; command is for.
Syntax # The &amp;lsquo;g&amp;rsquo; command is executed in command mode and the syntax is following:
:g/pattern/command Also the inverse is possible (run command on lines that do not match)
:g!/pattern/command or
:v/pattern/command Examples # Delete all lines containing pattern # :g/foo/d Delete all empty lines # :g/^\s*$/d Move imports to start of file # :g/import/m0 Capitalize all lines not containig bar # :v/bar/normal gUU </description>
    </item>
    
    <item>
      <title>Week 20</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-20/</guid>
      <description>Folds # In all kinds of IDEs folds are quite common. You can fold all kinds of long functions or even bunch of vars to make your spagetti code easier to read. Folds also do exist in vim, and here are some examples for it.
Folding lines # To fold lines zF command can be used followed by a motion. Folds can also be created in command mode with</description>
    </item>
    
    <item>
      <title>Week 21</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-21/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-21/</guid>
      <description>Incremental selection # Most ides support incremental selection of some sort. You can start from single function argument, then select all arguments, whole line etc. and then up to whole file. Same is possible using treesitter
Setup # To enable incremential selection, following snippet can be used:
require&amp;#39;nvim-treesitter.configs&amp;#39;.setup { incremental_selection = { enable = true, keymaps = { init_selection = &amp;#34;gnn&amp;#34;, node_incremental = &amp;#34;grn&amp;#34;, scope_incremental = &amp;#34;grc&amp;#34;, node_decremental = &amp;#34;grm&amp;#34;, }, }, } Usage # Now you are pretty much good to go :D As you can see above, gnn can be used to init selection.</description>
    </item>
    
    <item>
      <title>Week 22</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-22/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-22/</guid>
      <description>Moving lines around # Moving lines can be thought of as deleting and pasting lines. However sometimes it is easier to think of it as pushing selected part up or down. For that vim has :m command.
The move command # The move command is quite easy to use. To move a line, first you have to place cursor at it or select it in visual mode. After that you can do :m &amp;lt;nr&amp;gt; to move line to line &amp;lt;nr&amp;gt;.</description>
    </item>
    
    <item>
      <title>Week 23</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-23/</guid>
      <description>Indenting text # Indenting text can be quite common in programming. You might want to format comments or text later printed to terminal. Vim can also give you a hand here.
Indenting # Indenting can be done with selecting text and then using &amp;lt; and &amp;gt; keys. Whilst this is useful for formatting text after it has been written you can also indent in insert mode. For that we have ^D and ^T for deindent and indent respectively.</description>
    </item>
    
    <item>
      <title>Week 24</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-24/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-24/</guid>
      <description>Aligning text # A simple, but sometimes boring and slow task is alagning text. However it is also quite common task in programming, wheather fore readme or for printing to terminal.
Aligning to columns # One of the most common tasks is algining text to columns. It can be easily achieved using linux column command.
:&amp;#39;&amp;lt;,&amp;#39;&amp;gt;! column -t Centering text # There is also a command in vim for centering text.</description>
    </item>
    
    <item>
      <title>Week 25</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-25/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-25/</guid>
      <description>Aligning text # This week we&amp;rsquo;re simply continuing with aligning text.
Aligning left or right # Aigning text to left or right can be achieved with :left and :right. Make sure to also set correct textwidth so that aligning right would make sense.
Aligning by character # As a followup to last week I also decided to add option to align by char. For that you can use
:% !</description>
    </item>
    
    <item>
      <title>Week 26</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-26/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-26/</guid>
      <description>Manipulating numbers # It is quite often, that we do not treat numbersr just as text, but as actual numbers. We might wish to either increment, decrement or perform any other numerical operations.
Incrementing and decrementing # Incrementing and decrementing can be done with C-a and C-x. You simply have to have your cursor on the same line and then the command modifies the first number on the given line.</description>
    </item>
    
    <item>
      <title>Week 27</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-27/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-27/</guid>
      <description>Digraphs # Vim has also a feature tu insert digraphs, hers how.
Viewing available options # To see available digraphs use :dig command.
Inserting # Inserting can be done with &amp;lt;C-K&amp;gt; &amp;lt;char1&amp;gt;&amp;lt;char2&amp;gt;. For example &amp;lt;C-K&amp;gt;-&amp;gt; for →.</description>
    </item>
    
    <item>
      <title>Week 28</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-28/</guid>
      <description>Deleting in insert mode # In Vim you normally in sert in insert mode and delete in normal mode. However, there are also shortcuts to delete text more conveniently in insert mode.
Shotcuts # &amp;lt;C-h&amp;gt; works as backspace.
&amp;lt;C-w&amp;gt; deletes word under cursor.
&amp;lt;C-u&amp;gt; delete line until cursor.</description>
    </item>
    
    <item>
      <title>Week 29</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-29/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-29/</guid>
      <description>Commands in insert mode # As discussed previously, in Vim you normally in sert in insert mode and delete in normal mode. However, there is a sleek way to temporarly tap into normal mode, run command and return to insert mode.
This is how # &amp;lt;C-o&amp;gt; is a simple shortcut to tap into normal mode for single command. After running the command you are automatically put back into insert mode.</description>
    </item>
    
    <item>
      <title>Week 3</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-03/</guid>
      <description>Optional object filters # Optional object index filter is specified with postfix ? (.foo?.bar?) and it works just as regular object index filter except it doesn&amp;rsquo;t output an error if . or .foo is not an object.</description>
    </item>
    
    <item>
      <title>Week 3</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-03/</guid>
      <description>Working on long lines # Sometimes lines are so long that they do not fit onto screen. It is inportant to know how to split line to multiple or sometimes merge into single in these cases.
Movement # This is how to move on wrapped lines as if they were multiple lines
gj - down gk - up g$ - end of a visual line g0 - beginning of a visual line Split to multiple lines # To split single line (or any other text object) to multiple lines gq followed by a motion can be used.</description>
    </item>
    
    <item>
      <title>Week 30</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-30/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-30/</guid>
      <description>Moving in visual mode # In visual mode, there are some extra options to normal mode to select text easierly. Namely you can jump around already selected code.
Jump to the other side of selection # The o key can be used to jump to the other side of selection. Namely it jumps from corner to corner on diagonal. To jump to other end of selection on current line, use O.</description>
    </item>
    
    <item>
      <title>Week 31</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-31/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-31/</guid>
      <description>Undo in insert mode # In inser mode we insert text and later we can undo those changes with u key in normal mode. However undo to whole update is not what we always want and vim might not be always clever enough to understand what should be considere atomic edit. To solve that there is an option to tell where an atomic edit should end.
Splitting insert to multiple atoms # To split a single edit to multiple atoms use &amp;lt;C-G&amp;gt;u shortcut.</description>
    </item>
    
    <item>
      <title>Week 32</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-32/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-32/</guid>
      <description>Append to registers # Sometimes it is convenient to append some data to registers. The most likely usecase is:
Record macro with qa Stop recording with q Realize, something needs to be added to macro Append keystrokes you previously left out Apending keystrokes # Appending can be done with qA to continue the example above. For other registers, simply use other capital letters. You can end the recording with q as always.</description>
    </item>
    
    <item>
      <title>Week 33</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-33/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-33/</guid>
      <description>Opening links in other apps # Text files often contain links to either files or web pages. It is also quite common that you want to open those links with an app that you have installed for particular meme type.
The gx command # Vim has a gx command to open links with default app configured in your system. It can be used in a similar manner to gf. Simply place your cursor on the link and press gx.</description>
    </item>
    
    <item>
      <title>Week 34</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-34/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-34/</guid>
      <description>Reselectiong last visual selection # You select text, copy it and continue with other stuf.. Now you suddenly want to make the same selection again, but redoing all the motions is slow and cumbersome.
The gv command # There is a gv command in Vim, that goes to visual selection mode and reselects last selection again. Might be super handy when you have some REPL oen in separate window and copy your code there.</description>
    </item>
    
    <item>
      <title>Week 35</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-35/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-35/</guid>
      <description>Visually selecting search matches # You can search with / and visually select in motions, but theres also a way to select text based on your search.
The gn command # There is a gn command in Vim, that goes to visual selection mode and select your search match. Running gn again extends the selection to next match and so on&amp;hellip;</description>
    </item>
    
    <item>
      <title>Week 36</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-36/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-36/</guid>
      <description>Viewing ASCII values # Sometimes it is useful to know ASCII values of some characters. You can learn them by heart, do some math or let vim do the job for you.
The ga command # The ga (a like ASCII) does just that. Simply place cursor at a character and enter the command - easy as that.</description>
    </item>
    
    <item>
      <title>Week 37</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-37/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-37/</guid>
      <description>Ranges # Ranges are useful for performing action over a range of text. Whether it is adding some text, deleting or performing any other action, they can still be used. Here are some tips to use specify rangfes with the least amount of hustle.
Basic syntax # The range in vim consists of starting position and ending position. Quite common is to use line numbers for them so the syntax looks something like 1,30 to create range over first 30 lines.</description>
    </item>
    
    <item>
      <title>Week 38</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-38/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-38/</guid>
      <description> Substitute magic # Vim has a regex engine that has some so-called magic features. Here&amp;rsquo;s how to use or not to use them.
Enabling different levels of magic # \v - very magic :sm - substitute magic :sno - no magic \V - very no magic These all delete opening brackets:
:%s/\V(/ :%sm/(/ :%s/\(/ </description>
    </item>
    
    <item>
      <title>Week 39</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-39/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-39/</guid>
      <description>Repeating substitutions # Instead of doing substitution on the whole file and reverting if it goes wrong there is a better way to test out you substitutions.
Repeat same substitution # To repeat the last substitution with its flags use the :&amp;amp;&amp;amp; command.
Repeat the substitution with new pattern # To redo the substitution with a new pattern (same replacement) you can use the :- command. Typical solution would be</description>
    </item>
    
    <item>
      <title>Week 4</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-04/</guid>
      <description>Array filters # Array filter is quite basic as it works as .[i] where i is the index of the object we wish to select. Note that also negative indexes work just as in python.
Slice filters # Slice filters work as .[i:j] where i is the start index and j is the end index of the slice. The filter works on both arrays and strings.
Examples # echo &amp;#39;[1,2,3]&amp;#39; | jq &amp;#39;.</description>
    </item>
    
    <item>
      <title>Week 4</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-04/</guid>
      <description>Opening files # Here are some tips for opening files with vim.
Open file with nvim # The most basic way is to open files when opening vim.
nvim [-o] /path/to/file.txt -o Can be used to open each file in sepparate window or you can specify amount of windows with it as -o 4
Open width :edit / :view command # To edit
:e /path/to/file.txt View only mode
:v /path/to/file.</description>
    </item>
    
    <item>
      <title>Week 40</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-40/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-40/</guid>
      <description>Sorting text # Vim has also builtins for operations such as sorting text. Some of it is quite basic but there are also some quite fancy options.
Basics # Sorting in vim is done with the sort command or sort! for reverse direction.
Options # Useful options for sorting:
i - ignore case n - sort by first decimal on line f - sort by first float on line /pattern/ sort by what comes after the match r sort by what is in pattern Note: Some more tips on this week&amp;rsquo;s and previous weeks topics can be found here: https://thevaluable.</description>
    </item>
    
    <item>
      <title>Week 41</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-41/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-41/</guid>
      <description> Special character classes # Vim has some builtin character classes that might come in handy. Mostly useful for regex magic, but can be also used elsewhere.
Character classes # \f - Filename characters \i - Identifier characters \k - Keyword characters \p - Printable characters </description>
    </item>
    
    <item>
      <title>Week 42</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-42/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-42/</guid>
      <description> Zero-with lookaround # Zero-with lookaround assertions allow regex to match patterns looking forward or backward without actually including them in the match. Since they do dot have with, replacing them is actually inserting text. Simple example are ^ and $ characters.
Useful examples # \zs - Only match your pattern if what’s before the metacharacter \zs has a match \ze - Only match your pattern if what’s after the metacharacter \ze has a match \&amp;lt; - Match beginning of a word \&amp;gt; - Match end of a word \%^ - Match beginning of a file \%$ - Match end of a file \%V - Match only in last visual selection </description>
    </item>
    
    <item>
      <title>Week 43</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-43/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-43/</guid>
      <description>Regex with marks # Regular expressions can be also combined with marks in vim to have easier and more powerful expressions.
Usage # \%&amp;lt;&#39;m - Match before position &#39;m. \%&amp;lt;&#39;m - Match after position &#39;m. For example, /\%&amp;gt;&#39;afoo\%&amp;lt;&#39;b search the pattern foo between the mark &#39;a and &#39;b.</description>
    </item>
    
    <item>
      <title>Week 44</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-44/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-44/</guid>
      <description>External commands # Vim has also an easy interface to run external (shell) commands from within vim. Some of it is quite basic but it has also some small useful tips not used so often.
Usage # :! &amp;lt;cmd&amp;gt; executes the shell command &amp;lt;cmd&amp;gt;.
:!! repeats the last executed command.
To insert the output of the command into current buffer you can use :read! &amp;lt;cmd&amp;gt; or :!r &amp;lt;cmd&amp;gt; for short form.</description>
    </item>
    
    <item>
      <title>Week 45</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-45/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-45/</guid>
      <description>Virtual edit # While editing text normally, you cannot type characters in a random place in the window. You need to manually add spaces or tabs to type text to the right side of the buffer. However there is a way to tell vim to allow placing cursor everywhere and then add spaces wherever needed if something was inserted.
Usage # :set virtualedit=all allows you to type everywhere on the screen.</description>
    </item>
    
    <item>
      <title>Week 46</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-46/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-46/</guid>
      <description>Scroll in insert mode # Vim allows scrolling without leaving insert mode. This is mainly useful if you find staring at the top or bottom of your screen annoying and wish to move to cursor up/down on the monitor.
Usage # Scrolling in insert mode can be done with C-x C-y (scroll up) and C-x C-e (scroll down). Exiting scroll mode can be done with ESC as usual.</description>
    </item>
    
    <item>
      <title>Week 47</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-47/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-47/</guid>
      <description> More on completion # Most regular autocompletion cases are handled for me by nvim-cmp but there are still some cool completion related shortcuts that are good to know.
Most useful shortcuts # C-x C-l - Complete whole line from buffer C-x C-f - Complete filepath under cursor (expands env vars) C-x s - Complete with spelling suggestion C-x C-v - Complete with command line history </description>
    </item>
    
    <item>
      <title>Week 48</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-48/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-48/</guid>
      <description> Copying in command line mode # Sometimes we want to paste something from current buffer to the command line mode (accessed with :) The boring way to do it is go back to normal mode, yank it and then paste it with C-r&amp;lt;reg&amp;gt;. However there are some handy shortcuts for it.
Most useful shortcuts # C-r C-f Copy the filename under buffer cursor C-r C-w Copy the word under buffer cursor C-r C-a Copy the around word under buffer cursor C-r C-l Copy the line under buffer cursor </description>
    </item>
    
    <item>
      <title>Week 49</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-49/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-49/</guid>
      <description>Moving around in search results # Everybody knows that we can search with / and then move around the results with n and N. However there is also a way to move around the results without leaving the command line mode.
Basic usage # &amp;lt;C-g&amp;gt; Takes you to the next match and &amp;lt;C-t&amp;gt; takes you to the previous match. Nothing special here :D</description>
    </item>
    
    <item>
      <title>Week 5</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-05/</guid>
      <description> Array/Object value iterator # Array/object value iterator simply returns whole array/object instead of some of its values. You can also postfix it with ? to avoid yielding error if the root object isn&amp;rsquo;t array nor object.
Examples # echo &amp;#39;[1,2,3]&amp;#39; | jq &amp;#39;.[]&amp;#39; # [1, 2, 3] </description>
    </item>
    
    <item>
      <title>Week 5</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-05/</guid>
      <description>Opening files # More tips for opening files incoming.
Open multiple files from inside vim # Similarly to passing wildcards to arguments when opening vim with files you can open multiple files from inside vim. This can be acieved with :ar[gs] &amp;lt;pattern&amp;gt; command.
For example all .cpp files is src can be opened with
:args src/**/*.cpp Nvim Tree # Another very useful option is to use kyazdani42/nvim-tree (or something similar).</description>
    </item>
    
    <item>
      <title>Week 50</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-50/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-50/</guid>
      <description>Running multiple commands in CLI mode # Sometimes it is useful to run multiple commands one after another in CLI mode. An example would be replacing text with :argdo and then following it up with write.
Basic usage # Commands can be chained with | symbol. So the example above would become
:argdo s/foo/bar/g | w Note: You cannot use it with commands that take pipe as input. :!ls | .</description>
    </item>
    
    <item>
      <title>Week 51</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-51/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-51/</guid>
      <description>Abbreviations # Vim has a feature called abbreviations that can be used to either write out text without actually having to type all words or to correct some common typing mistakes.
Basic usage # To see all the abbreviations created use :ab[breviate] command.
To see abbreviations starting with some specific string you can use :ab &amp;lt;string&amp;gt;.
New abbreviations can be created with :ab &amp;lt;string&amp;gt; &amp;lt;replacement&amp;gt; and cleared with :una &amp;lt;string&amp;gt;.</description>
    </item>
    
    <item>
      <title>Week 52</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-52/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-52/</guid>
      <description>Saving options to a file # Usually you have hand written config fir your vim, but it might be that sometimes you want to save your current settings to a file. And vim has a command for that&amp;hellip;
Basic usage # You can save all your mappings and options to a file with :mk[exrc] &amp;lt;file&amp;gt;. The options can be later loaded with :source command.
If you wish to save more than just options and mappings you can use mks[ession] &amp;lt;file&amp;gt; command that saves current session (tabs, buffer, pwd, .</description>
    </item>
    
    <item>
      <title>Week 53</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-53/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-53/</guid>
      <description>Redirections # What if you want to save the output of Vim commands in a file or in a register? The command :redir is here to fulfill your desires.
Basic usage # :redir &amp;gt; &amp;lt;file&amp;gt; - Write commands output to a file. Use &amp;gt;&amp;gt; to append and :redir! to overwrite. :redir @&amp;lt;reg&amp;gt; - Write every commands output to the register. :redir @&amp;lt;reg&amp;gt;&amp;gt;&amp;gt; - Append every commands output to register. (Caps append as well) :redir =&amp;gt; &amp;lt;var&amp;gt; - Write every commands output to a variable.</description>
    </item>
    
    <item>
      <title>Week 54</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-54/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-54/</guid>
      <description> Filtering command output # Vim has built in command :filter to filter command output so you wouldn&amp;rsquo;t have to use grep etc. for it.
Basic usage # The basic usage is :filter /pattern/ &amp;lt;cmd&amp;gt;
Example # Here is an example to show only buffers that have &amp;ldquo;content&amp;rdquo; in them.
:filter /content/ buffers </description>
    </item>
    
    <item>
      <title>Week 55</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-55/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-55/</guid>
      <description> Verbose commands # Vim has :verbose command to give more precise information about
Abbreviations Options Mappings User commands Basic usage # The basic usage is :filter /pattern/ &amp;lt;cmd&amp;gt;
Example # Here is an example to see where mouse option was set from.
:verbose set mouse? </description>
    </item>
    
    <item>
      <title>Week 56</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-56/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-56/</guid>
      <description> Operator pending mode # Once you start deleting, yanking or changing text vim enters OPERATOR PENDING MODE which then waits for textobject to come in. There is also a way to define mapping for this mode with :omap.
Example # Here is an example to select everything on the line within next curly braces.
:onoremap nc :normal! f{vi{&amp;lt;cr&amp;gt; </description>
    </item>
    
    <item>
      <title>Week 57</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-57/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-57/</guid>
      <description>Autocommands # Autocommands are definitely something you have heard of, but maybe not tried yourself yet. Here&amp;rsquo;s how they work :D
Basic syntax # The basic syntax is following:
:au[tocmd] &amp;lt;event&amp;gt; &amp;lt;pattern&amp;gt; &amp;lt;cmd&amp;gt; &amp;lt;event&amp;gt; is event you wish to hook into (such as BufRead) &amp;lt;pattern&amp;gt; is regex pattern to filter files where to append the autocommand (use * for everywhere) &amp;lt;cnd&amp;gt; is the command to execute Note: You can specify multiple events or patterns by separating them with commas.</description>
    </item>
    
    <item>
      <title>Week 58</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-58/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-58/</guid>
      <description>Autocommand groups # Autocommand groups are something like a namespaces for autocommands. If you don&amp;rsquo;t specify group, the autocommand is added automatically to default autocommand group without a name. But there are several reasons why it can be useful to specify custom autocommand groups.
Basic syntax # The basic syntax is following:
:augroup &amp;lt;name&amp;gt; :au &amp;lt;event&amp;gt; &amp;lt;pattern&amp;gt; &amp;lt;cmd&amp;gt; ... :augroup END Note: You can add same autocommand to group multiple times so watch out for it :p Common fix to the problem is to delete all the commands in group with :au!</description>
    </item>
    
    <item>
      <title>Week 6</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-06/</guid>
      <description>Basic filter combinators # Here are some basics on how to combine filters.
Comma filter (,) # If too filters are separated with comma both filters are ran and their outputs are concatenated in the order they are specified.
Pipe filter (|) # If too filters are separated by a pipe operator then the first filter is rand and its output is fed into the second filter.
Examples # echo &amp;#39;{&amp;#34;foo&amp;#34;: 42, &amp;#34;bar&amp;#34;: &amp;#34;something else&amp;#34;, &amp;#34;baz&amp;#34;: true}&amp;#39; | jq &amp;#39;.</description>
    </item>
    
    <item>
      <title>Week 6</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-06/</guid>
      <description>Macros # It is quite often that we want to repeat some combination of actions multiple times&amp;hellip; And thats exactly what macros are for :D.
Recording a macro # Recording macro is started with pressing q in normal mode followed by macro name (any lowercase letter). Recording macro can be stopped with pressing q again.
qa # Record macro named &amp;#34;a&amp;#34; # perform actions q Playing macros # Macro can me played with @{macro-name}.</description>
    </item>
    
    <item>
      <title>Week 7</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-07/</guid>
      <description>Registers # Sometomes you copy a thing.. and then you copy another thing.. but now you want to paste the first one. This is what vim registers are for :D
Different types of registers # Unnamed register &amp;quot;&amp;quot; 10 numbered registers &amp;quot;0..9 The small delete register &amp;quot;- 26 named registers &amp;quot;a..z Three read-only registers &amp;quot;., &amp;quot;%, : Alternate buffer register &amp;quot;# The expression register &amp;quot;= The black hole register &amp;quot;_ The last selection registers &amp;quot;* and &amp;quot;+ Last search pattern register &amp;quot;/ Viewing registers # Show all registers</description>
    </item>
    
    <item>
      <title>Week 8</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-08/</guid>
      <description>Registers 1 # We continue with registers by looking at:
10 numbered registers &amp;quot;0..9 The small delete register &amp;quot;- 26 named registers &amp;quot;a..z Numbered registers # &amp;quot;0 has the last yank &amp;quot;1 has the last delete (d, c, s, x) &amp;quot;2..9 have previous deletes Side note
Note that %, (), /, n and N (and maybe some more) dont got to delete registers. Small delete register # This register contains the deletes that delete less than one line.</description>
    </item>
    
    <item>
      <title>Week 9</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-09/</guid>
      <description>Registers 2 # We continue with registers by looking at:
Three read-only registers &amp;quot;., &amp;quot;%, : Alternate file register &amp;quot;# The expression register &amp;quot;= Readonly registers # &amp;quot;. Last insert mode &amp;quot;% Current file name &amp;quot;: Last Command Some tips to go with current filename:
%:p -&amp;gt; Make filename full path %:h -&amp;gt; Head of the filename %:t -&amp;gt; Tail of the filename %:r -&amp;gt; Root %:e -&amp;gt; Extension Alternate file register # Register can be accessed via &amp;quot;#.</description>
    </item>
    
  </channel>
</rss>

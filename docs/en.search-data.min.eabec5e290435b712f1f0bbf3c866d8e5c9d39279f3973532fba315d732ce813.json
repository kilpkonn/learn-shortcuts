[{"id":0,"href":"/learn-shortcuts/docs/nvim/","title":"Neovim tips","section":"Docs","content":"Neovim tips #   week-00 Starting point week-01 Rename in range week-02 Run command on lines that match week-03 Working on long lines week-04 Opening files week-05 Opening more files week-06 Macros basics week-07 Registers intro week-08 Registers 1 week-09 Registers 2 week-10 Registers 3 week-11 Marks week-12 More on Marks week-13 Buffers  "},{"id":1,"href":"/learn-shortcuts/docs/nvim/week-00/","title":"Week 0","section":"Neovim tips","content":"Starting point #  This is a short chapter to describe starting point.\nBefore starting you should have:\n basic experience with neovim (I had ~5 months as neovim as my main editor but also less is sufficient for sure) know basic movement, editing and similar in vim. know very basics of lua (for config)  Some random tips #  Make neovim your default editor\n# .zshenv export EDITOR=\u0026#34;nvim\u0026#34; Add alias to launch neovim faster\n# .zshrc alias v=\u0026#34;nvim\u0026#34; Edit terminal command in vim with C-e (zsh specific)\n# .zshrc autoload edit-command-line; zle -N edit-command-line bindkey \u0026#39;^e\u0026#39; edit-command-line My nvim config can be found here\n"},{"id":2,"href":"/learn-shortcuts/docs/nvim/week-01/","title":"Week 1","section":"Neovim tips","content":"Replace in range #  Sometimes we wish to replace strings only in some range, not at file at a time. Here are some tims to accomplish that.\nReplace in visually seleceted range #   Select range in visual mode Press \u0026lt;:\u0026gt; to start range action, you should see something like this:  :\u0026#39;\u0026lt;,\u0026#39;\u0026gt;Type in replace command as usual eg. for foo -\u0026gt; bar  :\u0026#39;\u0026lt;,\u0026#39;\u0026gt;s/foo/bar/gReplace last visually selected range in normal mode #   Select range in visual mode Exit to normal mode Start command with \u0026lt;:\u0026gt; as usual Use \\%V to restrict selection to previously selected visual range. Replace usual eg. for foo -\u0026gt; bar  :%s/\\%Vfoo/bar/gReplace multiple ranges #  You can also select range in command mode with :start,end and run command on it. You can then also chain renaming in multiple ranges like so\n:18,20s/foo/bar/g | 28,30\u0026amp;\u0026amp;"},{"id":3,"href":"/learn-shortcuts/docs/nvim/week-10/","title":"Week 10","section":"Neovim tips","content":"Registers 3 #  We finish with registers by looking at:\n Black hole register Last selection register Last search register  The black hole register #   \u0026quot;_ \u0026lt;- the name When writing to it, nothing happens Can be used to delete text without affecting other registers Reading it returns nothing Can be used for clearing other registers  Last selection registers #  Keys: \u0026quot;+ and \u0026quot;* Useful for operating with system clipboard. In case you do not like it you can use the clipboard for all operations\nset clipboard+=unnamedplusThe last search register #  Key: \u0026quot;/ In inser/search mode int can be accessed with \u0026lt;C-r\u0026gt;/\nMostly useful for correcting searces and later using previous search for replace etc.\n"},{"id":4,"href":"/learn-shortcuts/docs/nvim/week-11/","title":"Week 11","section":"Neovim tips","content":"Vim Marks #  Marks allow storying corrent location and returning to it later. There are generally 3 types of marks lowercase marks, uppercase marks and special marks. Marks can be added with m\u0026lt;letter\u0026gt; in normal mode for example ma. The mark stores both the line and column information.\nLowercase marks #  These are marks for a-z. Lowercase marks are local to a file meaning multiple files can have say mark 'a.\nNote: You can only jump to lowercase marks whilst in the same file.  Uppercase marks #  These are marks from A-Z. Uppercase marks are global meaning there can be only one mark 'A. These can be really useful for returning to some place after moving around in multiple files.\nUsing marks #  ma - Add mark `a`\u0026#39;a - Jump to line of mark (first nonblank character)`a - Jump to position of mark (line and column)d\u0026#39;a - Delete from current line to line of mark `a`d`a - Delete from current position to position of mark `a`c\u0026#39;a - Change text from current line to line of mark `a`:marks - List all marks:marks aB - List marks `a` and `B` Commands like d'a operate linewise and include start and end lines but commands like d`a operate characterwise and include start but not the end character.  "},{"id":5,"href":"/learn-shortcuts/docs/nvim/week-12/","title":"Week 12","section":"Neovim tips","content":"More on Marks #  We learned some basics of vim marks last week. Now we can take a look at some more advanced commands.\nMovement #  Here are some more options to move around marks.\n]\u0026#39; - jump to next line with a lowercase mark[\u0026#39; - jump to previous line with a lowercase mark]` - jump to next lowercase mark[` - jump to previous lowercase markNote: You can use count with all the commands above, for example 5[' works.  Special marks #  Here are some special marks from vim that can be useful.\n`. - Jump to position of last change in buffer`\u0026#34; - Jump to position where last exited current buffer`0 - Jump to position in last file edited (Also other numbers)\u0026#39;\u0026#39; - Jump back (to line before last jump)`` - Jump back (to position before last jump)`[ or `] Jump to beginning / end of previously yanked text`\u0026lt; or `\u0026gt; Jump to beginning / end of last visual selectionDeleting marks #  Sometimes you also want to delete marks. This can be done with :delmarks.\n:delmarks a - deletes a:delmarks a-d - deletes a,b,c,d:delmarks ax - deletes a,x:delmarks! - deletes all lowercase marks"},{"id":6,"href":"/learn-shortcuts/docs/nvim/week-13/","title":"Week 13","section":"Neovim tips","content":"Buffers #  Vim buffers are something you can think of as opened files. Some of them are readonly and do not correspond to actual files (eg. Nvimtree), but it still is something that makes thinking of them easier.\nA buffer can be opened in multiple windows in which case if you edit it in one window, the changes also appear in the other.\nBasic commands #  You can view the contents of buffers with :buffers or :ls. The ouput of the command is:\n:ls\u0026lt;nr\u0026gt; \u0026lt;mark\u0026gt;\u0026lt;info\u0026gt; \u0026lt;unsaved\u0026gt; \u0026lt;name\u0026gt; line \u0026lt;line nr\u0026gt;Switching buffers #  Here are some commands to move between buffers\n:bp - go to previous buffer:bn - go to next buffer:b\u0026lt;nr\u0026gt; - jump to buffer by number\u0026lt;C-6\u0026gt; - jump between current and alternate bufferClosing buffers #  :bd - Delete buffer:bw - Wipe buffer, deletes everything related to it "},{"id":7,"href":"/learn-shortcuts/docs/nvim/week-02/","title":"Week 2","section":"Neovim tips","content":"The \u0026lsquo;g\u0026rsquo; command #  It is quite common to wish to run some specific command on every line containing a pattern. This is exactly what the \u0026lsquo;g\u0026rsquo; command is for.\nSyntax #  The \u0026lsquo;g\u0026rsquo; command is executed in command mode and the syntax is following:\n:g/pattern/commandAlso the inverse is possible (run command on lines that do not match)\n:g!/pattern/commandor\n:v/pattern/commandExamples #  Delete all lines containing pattern #  :g/foo/dDelete all empty lines #  :g/^\\s*$/dMove imports to start of file #  :g/import/m0Capitalize all lines not containig bar #  :v/bar/normal gUU"},{"id":8,"href":"/learn-shortcuts/docs/nvim/week-03/","title":"Week 3","section":"Neovim tips","content":"Working on long lines #  Sometimes lines are so long that they do not fit onto screen. It is inportant to know how to split line to multiple or sometimes merge into single in these cases.\nMovement #  This is how to move on wrapped lines as if they were multiple lines\ngj - downgk - upg$ - end of a visual lineg0 - beginning of a visual lineSplit to multiple lines #  To split single line (or any other text object) to multiple lines gq followed by a motion can be used. For example splitting current lines can be done with gqq.\nMerge lines #  The opposite of split would be merge lines and it can be done with J command. To avoid adding space in between gJ can be used.\nCapitalization #  You can also performa capitalization on the whole line (or any other text object) at once.\ngu - uncapitalizegU - capitalizeg~ - flip capitalizationFor exaple gu$ uncapitalizes till end of the line.\nReselect last selection #  To reselect last selection gv can be used.\n"},{"id":9,"href":"/learn-shortcuts/docs/nvim/week-04/","title":"Week 4","section":"Neovim tips","content":"Opening files #  Here are some tips for opening files with vim.\nOpen file with nvim #  The most basic way is to open files when opening vim.\nnvim [-o] /path/to/file.txt -o Can be used to open each file in sepparate window or you can specify amount of windows with it as -o 4\nOpen width :edit / :view command #  To edit\n:e /path/to/file.txtView only mode\n:v /path/to/file.txtOpen path in buffer #  Sometimes you have some paths in you text document and you want to open them. For that you can simply do gf on the path to open it.\n"},{"id":10,"href":"/learn-shortcuts/docs/nvim/week-05/","title":"Week 5","section":"Neovim tips","content":"Opening files #  More tips for opening files incoming.\nOpen multiple files from inside vim #  Similarly to passing wildcards to arguments when opening vim with files you can open multiple files from inside vim. This can be acieved with :ar[gs] \u0026lt;pattern\u0026gt; command.\nFor example all .cpp files is src can be opened with\n:args src/**/*.cppNvim Tree #  Another very useful option is to use kyazdani42/nvim-tree (or something similar). Some keymappings inside nvim-tree.\nx - cutc - copyp - pastey - copy name\u0026lt;C-V\u0026gt; - open file in vertical splitH - toggle visibility of dotfiles..and moreTelescope #  Telescope is also very useful when opening files with either find_files or live_grep. Find files is fuzzy finder for files whilst live grep is for searching file by it\u0026rsquo;s context (fuzzy finder for text). My mappings for them\n\u0026lt;Leader\u0026gt;ff - find_files\u0026lt;Leader\u0026gt;fw - live_grep"},{"id":11,"href":"/learn-shortcuts/docs/nvim/week-06/","title":"Week 6","section":"Neovim tips","content":"Macros #  It is quite often that we want to repeat some combination of actions multiple times\u0026hellip; And thats exactly what macros are for :D.\nRecording a macro #  Recording macro is started with pressing q in normal mode followed by macro name (any lowercase letter). Recording macro can be stopped with pressing q again.\nqa # Record macro named \u0026#34;a\u0026#34;# perform actionsqPlaying macros #  Macro can me played with @{macro-name}. It is also possible to specify how many times the macro should be run.\n@a # Run macro \u0026#34;a\u0026#34;10@a # Run macro \u0026#34;a\u0026#34; 10 times"},{"id":12,"href":"/learn-shortcuts/docs/nvim/week-07/","title":"Week 7","section":"Neovim tips","content":"Registers #  Sometomes you copy a thing.. and then you copy another thing.. but now you want to paste the first one. This is what vim registers are for :D\nDifferent types of registers #   Unnamed register \u0026quot;\u0026quot; 10 numbered registers \u0026quot;0..9 The small delete register \u0026quot;- 26 named registers \u0026quot;a..z Three read-only registers \u0026quot;., \u0026quot;%, : Alternate buffer register \u0026quot;# The expression register \u0026quot;= The black hole register \u0026quot;_ The last selection registers \u0026quot;* and \u0026quot;+ Last search pattern register \u0026quot;/  Viewing registers #  Show all registers\n:registers# Or simply..:regShow specific register\n:reg \u0026lt;register\u0026gt;Accessing registers #  Normal mode\n\u0026#34;\u0026lt;reg\u0026gt; \u0026lt;action\u0026gt;  \u0026#34;0p # Paste from register \u0026#34;0 Insert mode\n\u0026lt;C-r\u0026gt; \u0026lt;reg\u0026gt; \u0026lt;action\u0026gt;Unnamed register #  Yank, delete, substitute and similar commands already use the unnamed register. The unnamed register acts as a default so there is no need to specify it via \u0026quot;\u0026quot;. In other words \u0026quot;\u0026quot;yy and yy both yank line to unnamed register.\nSide note\nMake sure to check out https://www.youtube.com/watch?v=I5QGlfbuCfs for more detailed description!  "},{"id":13,"href":"/learn-shortcuts/docs/nvim/week-08/","title":"Week 8","section":"Neovim tips","content":"Registers 1 #  We continue with registers by looking at:\n 10 numbered registers \u0026quot;0..9 The small delete register \u0026quot;- 26 named registers \u0026quot;a..z  Numbered registers #   \u0026quot;0 has the last yank \u0026quot;1 has the last delete (d, c, s, x) \u0026quot;2..9 have previous deletes  Side note\nNote that %, (), /, n and N (and maybe some more) dont got to delete registers.  Small delete register #  This register contains the deletes that delete less than one line. This is also somewhat confusing register as some commands don\u0026rsquo;t put stuff there while others do. Don\u0026rsquo;t have any good usecase, but never know :D\nNamed registers #   Store whatever you want Macros are stored here automatically You can edit macros by editing contents of these registers  Edit macro a with:\nlet @a=\u0026#39;\u0026lt;macro\u0026gt;\u0026#39;Use \u0026lt;C-r\u0026gt;a to access previous macro from \u0026quot;a register in insert mode.\n"},{"id":14,"href":"/learn-shortcuts/docs/nvim/week-09/","title":"Week 9","section":"Neovim tips","content":"Registers 2 #  We continue with registers by looking at:\n Three read-only registers \u0026quot;., \u0026quot;%, : Alternate file register \u0026quot;# The expression register \u0026quot;=  Readonly registers #   \u0026quot;. Last insert mode \u0026quot;% Current file name \u0026quot;: Last Command  Some tips to go with current filename:\n%:p -\u0026gt; Make filename full path%:h -\u0026gt; Head of the filename%:t -\u0026gt; Tail of the filename%:r -\u0026gt; Root%:e -\u0026gt; ExtensionAlternate file register #  Register can be accessed via \u0026quot;#. Always contains the filename of the last file you were at. You can quicly switch to last file with \u0026lt;C-^\u0026gt; Otherwise works similraly to current file reg.\nThe expression register #  Can be accessed via \u0026quot;=. You can do math and system calls and then paste.\nExamples:\n=123 * 456=system(\u0026#39;ls \u0026#39;)"}]
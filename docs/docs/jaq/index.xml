<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jaq from zero to hero on Learn Shortcuts</title>
    <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/</link>
    <description>Recent content in Jaq from zero to hero on Learn Shortcuts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://kilpkonn.github.io/learn-shortcuts/docs/jaq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Week 1</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-01/</guid>
      <description> Identity filter # Identity filter is the simplest filter there is as it basically just returns the input. Identity filter is specified as ..
Example # echo &amp;#39;{ &amp;#34;a&amp;#34;: 1, &amp;#34;b&amp;#34;: true }&amp;#39; | jq &amp;#39;.&amp;#39; </description>
    </item>
    
    <item>
      <title>Week 10</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-10/</guid>
      <description>Addition (+) and subtraction (-) # Addition takes two filters and then adds results of them together. Depending of the value type, adding has different meanings:
Numbers are added arithmetically Arrays are concatenated Strings are concatenated Objects are merged. If both have same key, then the object on the right wins Note: null can be added to any value resulting no change. Subtraction works in a similar manner. For arrays it means that are occurrences of element(s) are removed.</description>
    </item>
    
    <item>
      <title>Week 11</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-11/</guid>
      <description>Multiplication (*), division (/), modulo (%) # All these infix operators work as you&amp;rsquo;d expect with numbers. Only thing to note is that dividing with 0 gives error.
Multiplying string works as in python (repeats string n times).
Dividing string by another string splits first string using the second string as a separator.
Multiplying objects merges them recursively, so it works similarly to addition, but if both objects contain the same key and values are objects, then they get merged.</description>
    </item>
    
    <item>
      <title>Week 12</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-12/</guid>
      <description> Function length # The length function is one of the basic functions in jq. It works pretty much as expected, but there are some points to bring out just to be sure.
Length of string is amount of characters Length of array is amount of elements Length of object is amount of key-value pairs Length of null is 0 Examples # Input
[[1,2], &amp;#34;string&amp;#34;, {&amp;#34;a&amp;#34;:2}, null] Query
jq &amp;#39;.[] | length&amp;#39; -&amp;gt; 2, 6, 1, 0 </description>
    </item>
    
    <item>
      <title>Week 13</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-13/</guid>
      <description>Function keys # The builtin function keys, when given an object, returns its keys in an array.
The keys are sorted &amp;ldquo;alphabetically&amp;rdquo;, by unicode codepoint order. This is not an order that makes particular sense in any particular language, but you can count on it being the same for any two objects with the same set of keys, regardless of locale settings.
Note: For arrays the keys function returns an array of indices.</description>
    </item>
    
    <item>
      <title>Week 14</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-14/</guid>
      <description>Functions has(key) and in # The builtin function has(key) returns whether the input object has the given key, or the input array has an element at the given index. The function has the same effect as checking whether the key is in array of keys returned by the function keys, but it works faster.
The builtin function in in returns whether or not the input key is in the given object, or the input index corresponds to an element in the given array.</description>
    </item>
    
    <item>
      <title>Week 15</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-15/</guid>
      <description>Function path(path_expression) # Outputs array representations of the given path expression in ... The outputs are arrays of strings (object keys) and/or numbers (array indices).
Path expressions are jq expressions like .a, but also .[]. There are two types of path expressions: ones that can match exactly, and ones that cannot. For example, .a.b.c is an exact match path expression, while .a[].b is not.
path(exact_path_expression) will produce the array representation of the path expression even if it does not exist in .</description>
    </item>
    
    <item>
      <title>Week 16</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-16/</guid>
      <description> Function del(path_expression) # The builtin function del removes a key and its corresponding value from an object.
Examples # Input
{ &amp;#34;foo&amp;#34;: 42, &amp;#34;bar&amp;#34;: 9001, &amp;#34;baz&amp;#34;: 42 } Query
jq &amp;#39;del(.foo)&amp;#39; # --&amp;gt; {&amp;#34;bar&amp;#34;: 9001, &amp;#34;baz&amp;#34;: 42} </description>
    </item>
    
    <item>
      <title>Week 17</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-17/</guid>
      <description> Function getpath(PATHS) # The builtin function getpath outputs the values in . found at each path in PATHS.
Examples # Input
{ &amp;#34;a&amp;#34;: {&amp;#34;b&amp;#34;:0, &amp;#34;c&amp;#34;:1} } Query
jq &amp;#39;[getpath([&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;], [&amp;#34;a&amp;#34;,&amp;#34;c&amp;#34;])]&amp;#39; # --&amp;gt; [0, 1] Function setpath(PATHS; value) # The builtin function setpath sets the PATHS in . to VALUE. If there is no value to update, new value is inserted.
Examples # Input
{ &amp;#34;a&amp;#34;: {&amp;#34;b&amp;#34;:0} } Query
jq &amp;#39;setpath([&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;]; 1)&amp;#39; # --&amp;gt; {&amp;#34;a&amp;#34;: {&amp;#34;b&amp;#34;: 1}} </description>
    </item>
    
    <item>
      <title>Week 18</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-18/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-18/</guid>
      <description>Functions to_entries, from_entries, with_entries # These functions convert between an object and an array of key-value pairs. If to_entries is passed an object, then for each k: v entry in the input, the output array includes {&amp;quot;key&amp;quot;: k, &amp;quot;value&amp;quot;: v}.
from_entries does the opposite conversion, and with_entries(foo) is a shorthand for to_entries | map(foo) | from_entries, useful for doing some operation to all keys and values of an object. from_entries accepts key, Key, name, Name, value and Value as keys.</description>
    </item>
    
    <item>
      <title>Week 19</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-19/</guid>
      <description> Function select(boolean_expression) # The function select(foo) produces its input unchanged if foo returns true for that input, and produces no output otherwise.
It&amp;rsquo;s useful for filtering lists: [1,2,3] | map(select(. &amp;gt;= 2)) will give you [2,3].
Examples # Input
[1, 5, 3, 0, 7] Query
jq &amp;#39;map(select(. &amp;gt;= 2))&amp;#39; # --&amp;gt;[5,3,7] </description>
    </item>
    
    <item>
      <title>Week 2</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-02/</guid>
      <description> Object identifier index # Object identifier filter is the most basic non-trivial filter there is (well, along array index). The syntax is .foo, &#39;.foo.bar, .&amp;quot;123foo&amp;quot;, .&amp;quot;foo::bar&amp;quot; or .[&amp;quot;foo&amp;quot;]. The filter takes object and returns value at the key specified or null otherwise.
Example # echo &amp;#39;{ &amp;#34;a&amp;#34;: 1, &amp;#34;b&amp;#34;: true }&amp;#39; | jq &amp;#39;.a&amp;#39; # Outout: 1 echo &amp;#39;{ &amp;#34;a&amp;#34;: 1, &amp;#34;b&amp;#34;: true }&amp;#39; | jq &amp;#39;.[&amp;#34;b&amp;#34;]&amp;#39; # Outout: true </description>
    </item>
    
    <item>
      <title>Week 3</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-03/</guid>
      <description>Optional object filters # Optional object index filter is specified with postfix ? (.foo?.bar?) and it works just as regular object index filter except it doesn&amp;rsquo;t output an error if . or .foo is not an object.</description>
    </item>
    
    <item>
      <title>Week 4</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-04/</guid>
      <description>Array filters # Array filter is quite basic as it works as .[i] where i is the index of the object we wish to select. Note that also negative indexes work just as in python.
Slice filters # Slice filters work as .[i:j] where i is the start index and j is the end index of the slice. The filter works on both arrays and strings.
Examples # echo &amp;#39;[1,2,3]&amp;#39; | jq &amp;#39;.</description>
    </item>
    
    <item>
      <title>Week 5</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-05/</guid>
      <description> Array/Object value iterator # Array/object value iterator simply returns whole array/object instead of some of its values. You can also postfix it with ? to avoid yielding error if the root object isn&amp;rsquo;t array nor object.
Examples # echo &amp;#39;[1,2,3]&amp;#39; | jq &amp;#39;.[]&amp;#39; # [1, 2, 3] </description>
    </item>
    
    <item>
      <title>Week 6</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-06/</guid>
      <description>Basic filter combinators # Here are some basics on how to combine filters.
Comma filter (,) # If too filters are separated with comma both filters are ran and their outputs are concatenated in the order they are specified.
Pipe filter (|) # If too filters are separated by a pipe operator then the first filter is rand and its output is fed into the second filter.
Examples # echo &amp;#39;{&amp;#34;foo&amp;#34;: 42, &amp;#34;bar&amp;#34;: &amp;#34;something else&amp;#34;, &amp;#34;baz&amp;#34;: true}&amp;#39; | jq &amp;#39;.</description>
    </item>
    
    <item>
      <title>Week 7</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-07/</guid>
      <description> Array construction # Here are some basics on how to construct arrays.
Empty array # Empty array is simply [].
Array with items # Here are some ways of declaring array with items.
[1, 2, 3] [.foo, .bar, .baz] [[.items[].name]] </description>
    </item>
    
    <item>
      <title>Week 8</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-08/</guid>
      <description>Object construction # Here are some basics on how to construct objects.
Basics # Objects are constructed with {}, and you can use comma separated expressions inside object similarly to arrays. One thing to note is that you might be able to specify keys without quotes if the are &amp;ldquo;identifier-like&amp;rdquo;.
Useful tips # Since it is common that we want something like { foo: .foo, bar: .bar } there is a shorter form for it: { foo, bar }.</description>
    </item>
    
    <item>
      <title>Week 9</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/jaq/week-09/</guid>
      <description> Recursive descent .. # Recursively descends ., producing every value. For [1, 2] this is [[1, 2], 1, 2].
Useful tips # Note that ..a does not work so you should use ..|.a to get all values for key a.
Examples # Input
[{&amp;#34;a&amp;#34;: true, &amp;#34;b&amp;#34;: false}, 1] Query
..|.a? -&amp;gt; true </description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Neovim tips on Learn Shortcuts</title>
    <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/</link>
    <description>Recent content in Neovim tips on Learn Shortcuts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://kilpkonn.github.io/learn-shortcuts/docs/nvim/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Week 0</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-00/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-00/</guid>
      <description>Starting point #  This is a short chapter to describe starting point.
Before starting you should have:
 basic experience with neovim (I had ~5 months as neovim as my main editor but also less is sufficient for sure) know basic movement, editing and similar in vim. know very basics of lua (for config)  Some random tips #  Make neovim your default editor
# .zshenv export EDITOR=&amp;#34;nvim&amp;#34; Add alias to launch neovim faster</description>
    </item>
    
    <item>
      <title>Week 1</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-01/</guid>
      <description>Replace in range #  Sometimes we wish to replace strings only in some range, not at file at a time. Here are some tims to accomplish that.
Replace in visually seleceted range #   Select range in visual mode Press &amp;lt;:&amp;gt; to start range action, you should see something like this:  :&amp;#39;&amp;lt;,&amp;#39;&amp;gt;Type in replace command as usual eg. for foo -&amp;gt; bar  :&amp;#39;&amp;lt;,&amp;#39;&amp;gt;s/foo/bar/gReplace last visually selected range in normal mode #   Select range in visual mode Exit to normal mode Start command with &amp;lt;:&amp;gt; as usual Use \%V to restrict selection to previously selected visual range.</description>
    </item>
    
    <item>
      <title>Week 2</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-02/</guid>
      <description>The &amp;lsquo;g&amp;rsquo; command #  It is quite common to wish to run some specific command on every line containing a pattern. This is exactly what the &amp;lsquo;g&amp;rsquo; command is for.
Syntax #  The &amp;lsquo;g&amp;rsquo; command is executed in command mode and the syntax is following:
:g/pattern/commandAlso the inverse is possible (run command on lines that do not match)
:g!/pattern/commandor
:v/pattern/commandExamples #  Delete all lines containing pattern #  :g/foo/dDelete all empty lines #  :g/^\s*$/dMove imports to start of file #  :g/import/m0Capitalize all lines not containig bar #  :v/bar/normal gUU</description>
    </item>
    
    <item>
      <title>Week 3</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-03/</guid>
      <description>Working on long lines #  Sometimes lines are so long that they do not fit onto screen. It is inportant to know how to split line to multiple or sometimes merge into single in these cases.
Movement #  This is how to move on wrapped lines as if they were multiple lines
gj - downgk - upg$ - end of a visual lineg0 - beginning of a visual lineSplit to multiple lines #  To split single line (or any other text object) to multiple lines gq followed by a motion can be used.</description>
    </item>
    
    <item>
      <title>Week 4</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-04/</guid>
      <description>Opening files #  Here are some tips for opening files with vim.
Open file with nvim #  The most basic way is to open files when opening vim.
nvim [-o] /path/to/file.txt -o Can be used to open each file in sepparate window or you can specify amount of windows with it as -o 4
Open width :edit / :view command #  To edit
:e /path/to/file.txtView only mode</description>
    </item>
    
    <item>
      <title>Week 5</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-05/</guid>
      <description>Opening files #  More tips for opening files incoming.
Open multiple files from inside vim #  Similarly to passing wildcards to arguments when opening vim with files you can open multiple files from inside vim. This can be acieved with :ar[gs] &amp;lt;pattern&amp;gt; command.
For example all .cpp files is src can be opened with
:args src/**/*.cppNvim Tree #  Another very useful option is to use kyazdani42/nvim-tree (or something similar).</description>
    </item>
    
    <item>
      <title>Week 6</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-06/</guid>
      <description>Macros #  It is quite often that we want to repeat some combination of actions multiple times&amp;hellip; And thats exactly what macros are for :D.
Recording a macro #  Recording macro is started with pressing q in normal mode followed by macro name (any lowercase letter). Recording macro can be stopped with pressing q again.
qa # Record macro named &amp;#34;a&amp;#34;# perform actionsqPlaying macros #  Macro can me played with @{macro-name}.</description>
    </item>
    
    <item>
      <title>Week 7</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-07/</guid>
      <description>Registers #  Sometomes you copy a thing.. and then you copy another thing.. but now you want to paste the first one. This is what vim registers are for :D
Different types of registers #   Unnamed register &amp;quot;&amp;quot; 10 numbered registers &amp;quot;0..9 The small delete register &amp;quot;- 26 named registers &amp;quot;a..z Three read-only registers &amp;quot;., &amp;quot;%, : Alternate buffer register &amp;quot;# The expression register &amp;quot;= The black hole register &amp;quot;_ The last selection registers &amp;quot;* and &amp;quot;+ Last search pattern register &amp;quot;/  Viewing registers #  Show all registers</description>
    </item>
    
    <item>
      <title>Week 8</title>
      <link>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kilpkonn.github.io/learn-shortcuts/docs/nvim/week-08/</guid>
      <description>Registers 1 #  We continue with registers by looking at√ñ
 10 numbered registers &amp;quot;0..9 The small delete register &amp;quot;- 26 named registers &amp;quot;a..z  Numbered registers #   &amp;quot;0 has the last yank &amp;quot;1 has the last delete (d, c, s, x) &amp;quot;2..9 have previous deletes  Side note
Note that %, (), /, n and N (and maybe some more) dont got to delete registers.  Small delete register #  This register contains the deletes that delete less than one line.</description>
    </item>
    
  </channel>
</rss>

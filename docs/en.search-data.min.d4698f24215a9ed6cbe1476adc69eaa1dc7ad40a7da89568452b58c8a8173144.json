[{"id":0,"href":"/learn-shortcuts/docs/nvim/","title":"Neovim tips","section":"Docs","content":"Neovim tips #   week-00 Starting point week-01 Rename in range week-02 Run command on lines that match week-03 Working on long lines week-04 Opening files week-05 Opening more files week-06 Macros basics  "},{"id":1,"href":"/learn-shortcuts/docs/nvim/week-00/","title":"Week 0","section":"Neovim tips","content":"Starting point #  This is a short chapter to describe starting point.\nBefore starting you should have:\n basic experience with neovim (I had ~5 months as neovim as my main editor but also less is sufficient for sure) know basic movement, editing and similar in vim. know very basics of lua (for config)  Some random tips #  Make neovim your default editor\n# .zshenv export EDITOR=\u0026#34;nvim\u0026#34; Add alias to launch neovim faster\n# .zshrc alias v=\u0026#34;nvim\u0026#34; Edit terminal command in vim with C-e (zsh specific)\n# .zshrc autoload edit-command-line; zle -N edit-command-line bindkey \u0026#39;^e\u0026#39; edit-command-line My nvim config can be found here\n"},{"id":2,"href":"/learn-shortcuts/docs/nvim/week-01/","title":"Week 1","section":"Neovim tips","content":"Replace in range #  Sometimes we wish to replace strings only in some range, not at file at a time. Here are some tims to accomplish that.\nReplace in visually seleceted range #   Select range in visual mode Press \u0026lt;:\u0026gt; to start range action, you should see something like this:  :\u0026#39;\u0026lt;,\u0026#39;\u0026gt;Type in replace command as usual eg. for foo -\u0026gt; bar  :\u0026#39;\u0026lt;,\u0026#39;\u0026gt;s/foo/bar/gReplace last visually selected range in normal mode #   Select range in visual mode Exit to normal mode Start command with \u0026lt;:\u0026gt; as usual Use \\%V to restrict selection to previously selected visual range. Replace usual eg. for foo -\u0026gt; bar  :%s/\\%Vfoo/bar/gReplace multiple ranges #  You can also select range in command mode with :start,end and run command on it. You can then also chain renaming in multiple ranges like so\n:18,20s/foo/bar/g | 28,30\u0026amp;\u0026amp;"},{"id":3,"href":"/learn-shortcuts/docs/nvim/week-02/","title":"Week 2","section":"Neovim tips","content":"The \u0026lsquo;g\u0026rsquo; command #  It is quite common to wish to run some specific command on every line containing a pattern. This is exactly what the \u0026lsquo;g\u0026rsquo; command is for.\nSyntax #  The \u0026lsquo;g\u0026rsquo; command is executed in command mode and the syntax is following:\n:g/pattern/commandAlso the inverse is possible (run command on lines that do not match)\n:g!/pattern/commandor\n:v/pattern/commandExamples #  Delete all lines containing pattern #  :g/foo/dDelete all empty lines #  :g/^\\s*$/dMove imports to start of file #  :g/import/m0Capitalize all lines not containig bar #  :v/bar/normal gUU"},{"id":4,"href":"/learn-shortcuts/docs/nvim/week-03/","title":"Week 3","section":"Neovim tips","content":"Working on long lines #  Sometimes lines are so long that they do not fit onto screen. It is inportant to know how to split line to multiple or sometimes merge into single in these cases.\nMovement #  This is how to move on wrapped lines as if they were multiple lines\ngj - downgk - upg$ - end of a visual lineg0 - beginning of a visual lineSplit to multiple lines #  To split single line (or any other text object) to multiple lines gq followed by a motion can be used. For example splitting current lines can be done with gqq.\nMerge lines #  The opposite of split would be merge lines and it can be done with J command. To avoid adding space in between gJ can be used.\nCapitalization #  You can also performa capitalization on the whole line (or any other text object) at once.\ngu - uncapitalizegU - capitalizeg~ - flip capitalizationFor exaple gu$ uncapitalizes till end of the line.\nReselect last selection #  To reselect last selection gv can be used.\n"},{"id":5,"href":"/learn-shortcuts/docs/nvim/week-04/","title":"Week 4","section":"Neovim tips","content":"Opening files #  Here are some tips for opening files with vim.\nOpen file with nvim #  The most basic way is to open files when opening vim.\nnvim [-o] /path/to/file.txt -o Can be used to open each file in sepparate window or you can specify amount of windows with it as -o 4\nOpen width :edit / :view command #  To edit\n:e /path/to/file.txtView only mode\n:v /path/to/file.txtOpen path in buffer #  Sometimes you have some paths in you text document and you want to open them. For that you can simply do gf on the path to open it.\n"},{"id":6,"href":"/learn-shortcuts/docs/nvim/week-05/","title":"Week 5","section":"Neovim tips","content":"Opening files #  More tips for opening files incoming.\nOpen multiple files from inside vim #  Similarly to passing wildcards to arguments when opening vim with files you can open multiple files from inside vim. This can be acieved with :ar[gs] \u0026lt;pattern\u0026gt; command.\nFor example all .cpp files is src can be opened with\n:args src/**/*.cppNvim Tree #  Another very useful option is to use kyazdani42/nvim-tree (or something similar). Some keymappings inside nvim-tree.\nx - cutc - copyp - pastey - copy name\u0026lt;C-V\u0026gt; - open file in vertical splitH - toggle visibility of dotfiles..and moreTelescope #  Telescope is also very useful when opening files with either find_files or live_grep. Find files is fuzzy finder for files whilst live grep is for searching file by it\u0026rsquo;s context (fuzzy finder for text). My mappings for them\n\u0026lt;Leader\u0026gt;ff - find_files\u0026lt;Leader\u0026gt;fw - live_grep"},{"id":7,"href":"/learn-shortcuts/docs/nvim/week-06/","title":"Week 6","section":"Neovim tips","content":"Macros #  It is quite often that we want to repeat some combination of actions multiple times\u0026hellip; And thats exactly what macros are for :D.\nRecording a macro #  Recording macro is started with pressing q in normal mode followed by macro name (any lowercase letter). Recording macro can be stopped with pressing q again.\nqa # Record macro named \u0026#34;a\u0026#34;# perform actionsqPlaying macros #  Macro can me played with @{macro-name}. It is also possible to specify how many times the macro should be run.\n@a # Run macro \u0026#34;a\u0026#34;10@a # Run macro \u0026#34;a\u0026#34; 10 times"}]
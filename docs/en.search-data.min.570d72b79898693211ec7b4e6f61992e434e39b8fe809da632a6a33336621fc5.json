[{"id":0,"href":"/learn-shortcuts/docs/nvim/","title":"Neovim tips","section":"Docs","content":" Neovim tips # week-00 Starting point week-01 Rename in range week-02 Run command on lines that match week-03 Working on long lines week-04 Opening files week-05 Opening more files week-06 Macros basics week-07 Registers intro week-08 Registers 1 week-09 Registers 2 week-10 Registers 3 week-11 Marks week-12 More on Marks week-13 Buffers week-14 QuickFix lists week-15 Makeprg and building files week-16 Vim compiler plugins week-17 Set and let commands week-18 More on navigation week-19 More on inserting and deleting week-20 Folds week-21 Incremental selection with Treesitter week-22 Moving lines around week-23 Indenting text week-24 Aligning text week-25 Aligning text 2 week-26 Manipulating numbers week-27 Digraphs week-28 Deleting in insert mode week-29 Commands in insert mode week-30 Moving in visual mode week-31 Undo and insert mode week-32 Appending to registers week-33 Opening files and links in other apps week-34 Reselecting last visual selection week-35 Visually selectiong search matches week-36 Viewing ASCII values week-37 Ranges week-38 Substitute magic week-39 Repeating substitutions week-40 Sorting text week-41 Special character classes week-42 Zero-with lookaround "},{"id":1,"href":"/learn-shortcuts/docs/nvim/week-00/","title":"Week 0","section":"Neovim tips","content":" Starting point # This is a short chapter to describe starting point.\nBefore starting you should have:\nbasic experience with neovim (I had ~5 months as neovim as my main editor but also less is sufficient for sure) know basic movement, editing and similar in vim. know very basics of lua (for config) Some random tips # Make neovim your default editor\n# .zshenv export EDITOR=\u0026#34;nvim\u0026#34; Add alias to launch neovim faster\n# .zshrc alias v=\u0026#34;nvim\u0026#34; Edit terminal command in vim with C-e (zsh specific)\n# .zshrc autoload edit-command-line; zle -N edit-command-line bindkey \u0026#39;^e\u0026#39; edit-command-line My nvim config can be found here\n"},{"id":2,"href":"/learn-shortcuts/docs/nvim/week-01/","title":"Week 1","section":"Neovim tips","content":" Replace in range # Sometimes we wish to replace strings only in some range, not at file at a time. Here are some tims to accomplish that.\nReplace in visually seleceted range # Select range in visual mode Press \u0026lt;:\u0026gt; to start range action, you should see something like this: :\u0026#39;\u0026lt;,\u0026#39;\u0026gt; Type in replace command as usual eg. for foo -\u0026gt; bar :\u0026#39;\u0026lt;,\u0026#39;\u0026gt;s/foo/bar/g Replace last visually selected range in normal mode # Select range in visual mode Exit to normal mode Start command with \u0026lt;:\u0026gt; as usual Use \\%V to restrict selection to previously selected visual range. Replace usual eg. for foo -\u0026gt; bar :%s/\\%Vfoo/bar/g Replace multiple ranges # You can also select range in command mode with :start,end and run command on it. You can then also chain renaming in multiple ranges like so\n:18,20s/foo/bar/g | 28,30\u0026amp;\u0026amp; "},{"id":3,"href":"/learn-shortcuts/docs/nvim/week-10/","title":"Week 10","section":"Neovim tips","content":" Registers 3 # We finish with registers by looking at:\nBlack hole register Last selection register Last search register The black hole register # \u0026quot;_ \u0026lt;- the name When writing to it, nothing happens Can be used to delete text without affecting other registers Reading it returns nothing Can be used for clearing other registers Last selection registers # Keys: \u0026quot;+ and \u0026quot;* Useful for operating with system clipboard. In case you do not like it you can use the clipboard for all operations\nset clipboard+=unnamedplus The last search register # Key: \u0026quot;/ In inser/search mode int can be accessed with \u0026lt;C-r\u0026gt;/\nMostly useful for correcting searces and later using previous search for replace etc.\n"},{"id":4,"href":"/learn-shortcuts/docs/nvim/week-11/","title":"Week 11","section":"Neovim tips","content":" Vim Marks # Marks allow storying corrent location and returning to it later. There are generally 3 types of marks lowercase marks, uppercase marks and special marks. Marks can be added with m\u0026lt;letter\u0026gt; in normal mode for example ma. The mark stores both the line and column information.\nLowercase marks # These are marks for a-z. Lowercase marks are local to a file meaning multiple files can have say mark 'a.\nNote: You can only jump to lowercase marks whilst in the same file. Uppercase marks # These are marks from A-Z. Uppercase marks are global meaning there can be only one mark 'A. These can be really useful for returning to some place after moving around in multiple files.\nUsing marks # ma - Add mark `a` \u0026#39;a - Jump to line of mark (first nonblank character) `a - Jump to position of mark (line and column) d\u0026#39;a - Delete from current line to line of mark `a` d`a - Delete from current position to position of mark `a` c\u0026#39;a - Change text from current line to line of mark `a` :marks - List all marks :marks aB - List marks `a` and `B` Commands like d'a operate linewise and include start and end lines but commands like d`a operate characterwise and include start but not the end character. "},{"id":5,"href":"/learn-shortcuts/docs/nvim/week-12/","title":"Week 12","section":"Neovim tips","content":" More on Marks # We learned some basics of vim marks last week. Now we can take a look at some more advanced commands.\nMovement # Here are some more options to move around marks.\n]\u0026#39; - jump to next line with a lowercase mark [\u0026#39; - jump to previous line with a lowercase mark ]` - jump to next lowercase mark [` - jump to previous lowercase mark Note: You can use count with all the commands above, for example 5[' works. Special marks # Here are some special marks from vim that can be useful.\n`. - Jump to position of last change in buffer `\u0026#34; - Jump to position where last exited current buffer `0 - Jump to position in last file edited (Also other numbers) \u0026#39;\u0026#39; - Jump back (to line before last jump) `` - Jump back (to position before last jump) `[ or `] Jump to beginning / end of previously yanked text `\u0026lt; or `\u0026gt; Jump to beginning / end of last visual selection Deleting marks # Sometimes you also want to delete marks. This can be done with :delmarks.\n:delmarks a - deletes a :delmarks a-d - deletes a,b,c,d :delmarks ax - deletes a,x :delmarks! - deletes all lowercase marks "},{"id":6,"href":"/learn-shortcuts/docs/nvim/week-13/","title":"Week 13","section":"Neovim tips","content":" Buffers # Vim buffers are something you can think of as opened files. Some of them are readonly and do not correspond to actual files (eg. Nvimtree), but it still is something that makes thinking of them easier.\nA buffer can be opened in multiple windows in which case if you edit it in one window, the changes also appear in the other.\nBasic commands # You can view the contents of buffers with :buffers or :ls. The ouput of the command is:\n:ls \u0026lt;nr\u0026gt; \u0026lt;mark\u0026gt;\u0026lt;info\u0026gt; \u0026lt;unsaved\u0026gt; \u0026lt;name\u0026gt; line \u0026lt;line nr\u0026gt; Switching buffers # Here are some commands to move between buffers\n:bp - go to previous buffer :bn - go to next buffer :b\u0026lt;nr\u0026gt; - jump to buffer by number \u0026lt;C-6\u0026gt; - jump between current and alternate buffer Closing buffers # :bd - Delete buffer :bw - Wipe buffer, deletes everything related to it "},{"id":7,"href":"/learn-shortcuts/docs/nvim/week-14/","title":"Week 14","section":"Neovim tips","content":" QuickFix lists # Whilst the name seems new, some of QuickFix lists usecases are quite common. r example it is used when vimgrepping a pattern and then jumping between entries found. Local QuickFix lists can be used for code errors and warnings.\nViewving and navigating QuickFix list # QuickFix list can be viewed with :copen or :lopen command depending on if you want global or local list. Navigation can be done with :cnext and :cprev or :lnext and :lprev respectively.\nRun command on all entries # Commands :cdo and :ldo allow running commands on all entries of the list. An example to transform TODO: into TODO(foo):\n:vimgrep TODO: % :cdo s/TODO:/TODO(foo):/g Populating QuickFix list with Telescope # One way to populate quickfix list is to use Telescope plugin.\n\u0026lt;C-q\u0026gt; - Send all not filtered items to QuickFix list \u0026lt;M-q\u0026gt; - Send all items to QuickFix list "},{"id":8,"href":"/learn-shortcuts/docs/nvim/week-15/","title":"Week 15","section":"Neovim tips","content":" Makeprg # A big part of programming is compiling files and running them. Whilst editing parts of code usually it is a good idea to sometimes build the project to see if everything works fine. This can be done also in vim without exiting it.\nMake and makeprg # To build a program you can run :make. As You might have guessed the default build system is GNU Make. However you can use different build systems via :set makeprg. Example to build current file with gcc (\\ is to escape space).\n:set makeprg=gcc\\ % Note: You can also run it instantly by chaining run command Local make # Running :make polulates QuickFix list with errors. To use local list instead :lmake command can be used instead. Otherwise it acts as :make.\nError format # One benefit of using :make rather than shelling out is that you can automatically jump between build errors. For that you need to :set errorformat An example for rust would be\nlet \u0026amp;efm=\u0026#39;\u0026#39; let \u0026amp;efm .= \u0026#39;%Eerror%m,\u0026#39; let \u0026amp;efm .= \u0026#39;%Wwarning: %m,\u0026#39; let \u0026amp;efm .= \u0026#39;%-Z%*\\s--\u0026gt; %f:%l:%c,\u0026#39; Note that this can become quite complex for some compilers so it might be a good idea to set it in ftplugin automatically rather than typing it in every time.\n"},{"id":9,"href":"/learn-shortcuts/docs/nvim/week-16/","title":"Week 16","section":"Neovim tips","content":" Compiler plugins # Compiler plugins are something that allow automating steps described in previous week. You can pretty much set the :makeprg and :efm based on filetype.\nWriting plugin # Compiler plugins are stored in compiler/ subdirecotory so ~/.config/nvim/compiler/ for nvim. You can write them both in vim and lua.\nExample plugin written in vim:\nif exists(\u0026#34;current_compiler\u0026#34;) | finish | endif \u0026#34; Needed to avoid running multiple times let current_compiler = \u0026#34;zsh\u0026#34; if exists(\u0026#34;:CompilerSet\u0026#34;) != 2\t\u0026#34; older Vim always used :setlocal command -nargs=* CompilerSet setlocal \u0026lt;args\u0026gt; endif CompilerSet makeprg=zsh\\ -n CompilerSet errorformat=%f:\\ line\\ %l:\\ %m Note: You can also write compiler plugins in lua, however I didn\u0026rsquo;t manage to find any good examples. Setting compiler # You can set compiler with :compiler \u0026lt;name\u0026gt;. To automate it you can easily move setting it automatically to ftplugin.\n"},{"id":10,"href":"/learn-shortcuts/docs/nvim/week-17/","title":"Week 17","section":"Neovim tips","content":" Set and let # Since day one, everybody know vim has :set command to set options. There also seems to be a :let command which in a way is similar, but it\u0026rsquo;s also quite different.\nSet command # Set is command for setting vim options. Here are some things you can do with it.\n:verbose set \u0026#34;show all options :set tw=40 \u0026#34;set option (text width to 40) :set wrap\u0026amp; \u0026#34;set default option (to wrap) :set nowrap \u0026#34;unset option :set wrap! \u0026#34;toggle option :set wrap? \u0026#34;show current value Let command # Let works similarly to set. It allows setting options, but it is more powerful as it also allows setting registers etc. However, it is generally harder to use than :set.\nlet \u0026amp;tw = 40 \u0026#34;set tw option to 40 let vi = \u0026#39;vim\u0026#39; \u0026#34;set variable let @a = $HOME . \u0026#39;/git\u0026#39; \u0026#34;set register value let $ENVVAR = \u0026#39;some_var\u0026#39; \u0026#34;set environment variable Misc # You can set multiple options at once with:\n:set et sw=4 sts=4 There is also way to set multiple items at once with let:\n:let [\u0026amp;et, \u0026amp;sw, \u0026amp;sts] = [0, 4, 4] Note: Right side of :let is expression, but right side of :set is value. In other words: :let \u0026amp;tw = 40 + 60 is legit, but :set tw=40+60 is not. Note: Note that tab comletion works with both "},{"id":11,"href":"/learn-shortcuts/docs/nvim/week-18/","title":"Week 18","section":"Neovim tips","content":" More on navigation # hjkl is nice and some stuff such as 0 and $ give extra touch, but there is much more available in vim. In this week we\u0026rsquo;ll come some of the options I\u0026rsquo;ve personally rarely used, but which can be very useful.\nMove to next occurance # One way to skip couple of keystrokes is to jump around with f followed by a letter you want to jump to. You can do the same going backwards direction with F. t and T operate in a similar manner, but places cursor just before the char.\nJump between brakets # The % shortcut can be used to jump between matching brakets, even if there are other levels of braket inside it.\nMove around text # { and } Can be useful when moving around paragraphs. They actually jump to clear lines before or after the paragraph. ( and ) Move around by sentence at a time.\n"},{"id":12,"href":"/learn-shortcuts/docs/nvim/week-19/","title":"Week 19","section":"Neovim tips","content":" More on inserting and deleting # How to insert and delete text are some of the first things you have to learn in vim, but there are also more \u0026ldquo;advanced\u0026rdquo; ways to do it or just cool shortcuts for it.\nStart inserting on new line # The o key can be used to start inserting text to newline just below the cursor. The capital O does the same, but start inserting to a line above.\nSpecial inserts # There are also some more special ways to insert text. :r [filename] can be used to insert the contents of some file to current location. :r ![command] runs shell command and pastes the output to current location.\nDeleting by sentence # To delete from current location to the end of sentence d) can be used. Similarly d} etc. can be used to delete to end of paragraph etc.\nReplacing text # To replace single character use r. To go to replace mode (instead of inserting new characters overwrite existing ones) use R.\n"},{"id":13,"href":"/learn-shortcuts/docs/nvim/week-02/","title":"Week 2","section":"Neovim tips","content":" The \u0026lsquo;g\u0026rsquo; command # It is quite common to wish to run some specific command on every line containing a pattern. This is exactly what the \u0026lsquo;g\u0026rsquo; command is for.\nSyntax # The \u0026lsquo;g\u0026rsquo; command is executed in command mode and the syntax is following:\n:g/pattern/command Also the inverse is possible (run command on lines that do not match)\n:g!/pattern/command or\n:v/pattern/command Examples # Delete all lines containing pattern # :g/foo/d Delete all empty lines # :g/^\\s*$/d Move imports to start of file # :g/import/m0 Capitalize all lines not containig bar # :v/bar/normal gUU "},{"id":14,"href":"/learn-shortcuts/docs/nvim/week-20/","title":"Week 20","section":"Neovim tips","content":" Folds # In all kinds of IDEs folds are quite common. You can fold all kinds of long functions or even bunch of vars to make your spagetti code easier to read. Folds also do exist in vim, and here are some examples for it.\nFolding lines # To fold lines zF command can be used followed by a motion. Folds can also be created in command mode with\n:{range}fo[ld] Deleting folds # Folds can be ledeted with zd or with zD to delete folds recursively.\nNote: Note that deleting folds does not delete text, but only fold markers. Opening and closing folds # Folds can be opened with zo and closed with zc, but there is also an onption za which will toggle fold. To operate on folds recursively zO, zC and zA can be used.\nOpening and closing multiple folds # To open or close all folds in a file zr and zm commands can be used. They also operate on one level of folds and have zR and zM as a counterparts to open or close folds recursively.\n"},{"id":15,"href":"/learn-shortcuts/docs/nvim/week-21/","title":"Week 21","section":"Neovim tips","content":" Incremental selection # Most ides support incremental selection of some sort. You can start from single function argument, then select all arguments, whole line etc. and then up to whole file. Same is possible using treesitter\nSetup # To enable incremential selection, following snippet can be used:\nrequire\u0026#39;nvim-treesitter.configs\u0026#39;.setup { incremental_selection = { enable = true, keymaps = { init_selection = \u0026#34;gnn\u0026#34;, node_incremental = \u0026#34;grn\u0026#34;, scope_incremental = \u0026#34;grc\u0026#34;, node_decremental = \u0026#34;grm\u0026#34;, }, }, } Usage # Now you are pretty much good to go :D As you can see above, gnn can be used to init selection. grn and grm can be used to increment and decrement the selection so they are likely the most useful commands. grc selects whole scope, which I\u0026rsquo;m not quite sure what exactly is, but it seems to be whole file etc.\n"},{"id":16,"href":"/learn-shortcuts/docs/nvim/week-22/","title":"Week 22","section":"Neovim tips","content":" Moving lines around # Moving lines can be thought of as deleting and pasting lines. However sometimes it is easier to think of it as pushing selected part up or down. For that vim has :m command.\nThe move command # The move command is quite easy to use. To move a line, first you have to place cursor at it or select it in visual mode. After that you can do :m \u0026lt;nr\u0026gt; to move line to line \u0026lt;nr\u0026gt;. Also relative numbers can be used to move lines around. Simly use :m +1\u0026lt;CR\u0026gt; to move line down or :m -2\u0026lt;CR\u0026gt; to move line up.\nThe copy command # Similarly to :m[ove] command vim has :co[py] command that works in a similary manner, but instead of moving lines it copies them. Copy also doesn\u0026rsquo;t play nice with relative line numbers.\n"},{"id":17,"href":"/learn-shortcuts/docs/nvim/week-23/","title":"Week 23","section":"Neovim tips","content":" Indenting text # Indenting text can be quite common in programming. You might want to format comments or text later printed to terminal. Vim can also give you a hand here.\nIndenting # Indenting can be done with selecting text and then using \u0026lt; and \u0026gt; keys. Whilst this is useful for formatting text after it has been written you can also indent in insert mode. For that we have ^D and ^T for deindent and indent respectively.\nShifting paragraphs or other text objects # Indenting can be also done on text objects. For that you can do \u0026gt;ap for example to shift current paragraph.\n"},{"id":18,"href":"/learn-shortcuts/docs/nvim/week-24/","title":"Week 24","section":"Neovim tips","content":" Aligning text # A simple, but sometimes boring and slow task is alagning text. However it is also quite common task in programming, wheather fore readme or for printing to terminal.\nAligning to columns # One of the most common tasks is algining text to columns. It can be easily achieved using linux column command.\n:\u0026#39;\u0026lt;,\u0026#39;\u0026gt;! column -t Centering text # There is also a command in vim for centering text.\n:\u0026#39;\u0026lt;,\u0026#39;\u0026gt;center 30 "},{"id":19,"href":"/learn-shortcuts/docs/nvim/week-25/","title":"Week 25","section":"Neovim tips","content":" Aligning text # This week we\u0026rsquo;re simply continuing with aligning text.\nAligning left or right # Aigning text to left or right can be achieved with :left and :right. Make sure to also set correct textwidth so that aligning right would make sense.\nAligning by character # As a followup to last week I also decided to add option to align by char. For that you can use\n:% ! column -t -s= -o= The example above aligns by = character.\n"},{"id":20,"href":"/learn-shortcuts/docs/nvim/week-26/","title":"Week 26","section":"Neovim tips","content":" Manipulating numbers # It is quite often, that we do not treat numbersr just as text, but as actual numbers. We might wish to either increment, decrement or perform any other numerical operations.\nIncrementing and decrementing # Incrementing and decrementing can be done with C-a and C-x. You simply have to have your cursor on the same line and then the command modifies the first number on the given line.\n"},{"id":21,"href":"/learn-shortcuts/docs/nvim/week-27/","title":"Week 27","section":"Neovim tips","content":" Digraphs # Vim has also a feature tu insert digraphs, hers how.\nViewing available options # To see available digraphs use :dig command.\nInserting # Inserting can be done with \u0026lt;C-K\u0026gt; \u0026lt;char1\u0026gt;\u0026lt;char2\u0026gt;. For example \u0026lt;C-K\u0026gt;-\u0026gt; for →.\n"},{"id":22,"href":"/learn-shortcuts/docs/nvim/week-28/","title":"Week 28","section":"Neovim tips","content":" Deleting in insert mode # In Vim you normally in sert in insert mode and delete in normal mode. However, there are also shortcuts to delete text more conveniently in insert mode.\nShotcuts # \u0026lt;C-h\u0026gt; works as backspace.\n\u0026lt;C-w\u0026gt; deletes word under cursor.\n\u0026lt;C-u\u0026gt; delete line until cursor.\n"},{"id":23,"href":"/learn-shortcuts/docs/nvim/week-29/","title":"Week 29","section":"Neovim tips","content":" Commands in insert mode # As discussed previously, in Vim you normally in sert in insert mode and delete in normal mode. However, there is a sleek way to temporarly tap into normal mode, run command and return to insert mode.\nThis is how # \u0026lt;C-o\u0026gt; is a simple shortcut to tap into normal mode for single command. After running the command you are automatically put back into insert mode. Easy as that, enjoy.\n"},{"id":24,"href":"/learn-shortcuts/docs/nvim/week-03/","title":"Week 3","section":"Neovim tips","content":" Working on long lines # Sometimes lines are so long that they do not fit onto screen. It is inportant to know how to split line to multiple or sometimes merge into single in these cases.\nMovement # This is how to move on wrapped lines as if they were multiple lines\ngj - down gk - up g$ - end of a visual line g0 - beginning of a visual line Split to multiple lines # To split single line (or any other text object) to multiple lines gq followed by a motion can be used. For example splitting current lines can be done with gqq.\nMerge lines # The opposite of split would be merge lines and it can be done with J command. To avoid adding space in between gJ can be used.\nCapitalization # You can also performa capitalization on the whole line (or any other text object) at once.\ngu - uncapitalize gU - capitalize g~ - flip capitalization For exaple gu$ uncapitalizes till end of the line.\nReselect last selection # To reselect last selection gv can be used.\n"},{"id":25,"href":"/learn-shortcuts/docs/nvim/week-30/","title":"Week 30","section":"Neovim tips","content":" Moving in visual mode # In visual mode, there are some extra options to normal mode to select text easierly. Namely you can jump around already selected code.\nJump to the other side of selection # The o key can be used to jump to the other side of selection. Namely it jumps from corner to corner on diagonal. To jump to other end of selection on current line, use O. With these two, it is possible to change current selection without reseting it.\n"},{"id":26,"href":"/learn-shortcuts/docs/nvim/week-31/","title":"Week 31","section":"Neovim tips","content":" Undo in insert mode # In inser mode we insert text and later we can undo those changes with u key in normal mode. However undo to whole update is not what we always want and vim might not be always clever enough to understand what should be considere atomic edit. To solve that there is an option to tell where an atomic edit should end.\nSplitting insert to multiple atoms # To split a single edit to multiple atoms use \u0026lt;C-G\u0026gt;u shortcut. Now you can undo everything you inserted after it without losing what was written before.\n"},{"id":27,"href":"/learn-shortcuts/docs/nvim/week-32/","title":"Week 32","section":"Neovim tips","content":" Append to registers # Sometimes it is convenient to append some data to registers. The most likely usecase is:\nRecord macro with qa Stop recording with q Realize, something needs to be added to macro Append keystrokes you previously left out Apending keystrokes # Appending can be done with qA to continue the example above. For other registers, simply use other capital letters. You can end the recording with q as always.\n"},{"id":28,"href":"/learn-shortcuts/docs/nvim/week-33/","title":"Week 33","section":"Neovim tips","content":" Opening links in other apps # Text files often contain links to either files or web pages. It is also quite common that you want to open those links with an app that you have installed for particular meme type.\nThe gx command # Vim has a gx command to open links with default app configured in your system. It can be used in a similar manner to gf. Simply place your cursor on the link and press gx. It can open web URLs, image files, videos etc.\nNote: You need to have netrw plugin enabled in vim for gx command to work. "},{"id":29,"href":"/learn-shortcuts/docs/nvim/week-34/","title":"Week 34","section":"Neovim tips","content":" Reselectiong last visual selection # You select text, copy it and continue with other stuf.. Now you suddenly want to make the same selection again, but redoing all the motions is slow and cumbersome.\nThe gv command # There is a gv command in Vim, that goes to visual selection mode and reselects last selection again. Might be super handy when you have some REPL oen in separate window and copy your code there.\n"},{"id":30,"href":"/learn-shortcuts/docs/nvim/week-35/","title":"Week 35","section":"Neovim tips","content":" Visually selecting search matches # You can search with / and visually select in motions, but theres also a way to select text based on your search.\nThe gn command # There is a gn command in Vim, that goes to visual selection mode and select your search match. Running gn again extends the selection to next match and so on\u0026hellip;\n"},{"id":31,"href":"/learn-shortcuts/docs/nvim/week-36/","title":"Week 36","section":"Neovim tips","content":" Viewing ASCII values # Sometimes it is useful to know ASCII values of some characters. You can learn them by heart, do some math or let vim do the job for you.\nThe ga command # The ga (a like ASCII) does just that. Simply place cursor at a character and enter the command - easy as that.\n"},{"id":32,"href":"/learn-shortcuts/docs/nvim/week-37/","title":"Week 37","section":"Neovim tips","content":" Ranges # Ranges are useful for performing action over a range of text. Whether it is adding some text, deleting or performing any other action, they can still be used. Here are some tips to use specify rangfes with the least amount of hustle.\nBasic syntax # The range in vim consists of starting position and ending position. Quite common is to use line numbers for them so the syntax looks something like 1,30 to create range over first 30 lines.\nNote that the indexing starts from 1!\nSpecial delimiters for range # Here are some more special delimiters that can be used for specifying range.\n. - Represents the current line $ - Represents last line of current buffer % - Represents entire file * - Represents last selection made in visual mode '\u0026lt; - Represents start of last visual selection '\u0026gt; - Represents end of last visual selection An example to select everything from current line till end of last visual selection would be\n.,\u0026#39;\u0026gt; "},{"id":33,"href":"/learn-shortcuts/docs/nvim/week-38/","title":"Week 38","section":"Neovim tips","content":" Substitute magic # Vim has a regex engine that has some so-called magic features. Here\u0026rsquo;s how to use or not to use them.\nEnabling different levels of magic # \\v - very magic :sm - substitute magic :sno - no magic \\V - very no magic These all delete opening brackets:\n:%s/\\V(/ :%sm/(/ :%s/\\(/ "},{"id":34,"href":"/learn-shortcuts/docs/nvim/week-39/","title":"Week 39","section":"Neovim tips","content":" Repeating substitutions # Instead of doing substitution on the whole file and reverting if it goes wrong there is a better way to test out you substitutions.\nRepeat same substitution # To repeat the last substitution with its flags use the :\u0026amp;\u0026amp; command.\nRepeat the substitution with new pattern # To redo the substitution with a new pattern (same replacement) you can use the :- command. Typical solution would be\n:s/pattern/replacement/ /new :~ In the sequence above the occurances of new get replaced with replacement.\nMore tips # :\u0026amp; Repeats last substitution with its falgs but without its range :g\u0026amp; Repeats last substitution with its flags and global range. Also replaces search pattern with latest search pattern used. "},{"id":35,"href":"/learn-shortcuts/docs/nvim/week-04/","title":"Week 4","section":"Neovim tips","content":" Opening files # Here are some tips for opening files with vim.\nOpen file with nvim # The most basic way is to open files when opening vim.\nnvim [-o] /path/to/file.txt -o Can be used to open each file in sepparate window or you can specify amount of windows with it as -o 4\nOpen width :edit / :view command # To edit\n:e /path/to/file.txt View only mode\n:v /path/to/file.txt Open path in buffer # Sometimes you have some paths in you text document and you want to open them. For that you can simply do gf on the path to open it.\n"},{"id":36,"href":"/learn-shortcuts/docs/nvim/week-40/","title":"Week 40","section":"Neovim tips","content":" Sorting text # Vim has also builtins for operations such as sorting text. Some of it is quite basic but there are also some quite fancy options.\nBasics # Sorting in vim is done with the sort command or sort! for reverse direction.\nOptions # Useful options for sorting:\ni - ignore case n - sort by first decimal on line f - sort by first float on line /pattern/ sort by what comes after the match r sort by what is in pattern Note: Some more tips on this week\u0026rsquo;s and previous weeks topics can be found here: https://thevaluable.dev/vim-advanced/ "},{"id":37,"href":"/learn-shortcuts/docs/nvim/week-41/","title":"Week 41","section":"Neovim tips","content":" Special character classes # Vim has some builtin character classes that might come in handy. Mostly useful for regex magic, but can be also used elsewhere.\nCharacter classes # \\f - Filename characters \\i - Identifier characters \\k - Keyword characters \\p - Printable characters "},{"id":38,"href":"/learn-shortcuts/docs/nvim/week-42/","title":"Week 42","section":"Neovim tips","content":" Zero-with lookaround # Zero-with lookaround assertions allow regex to match patterns looking forward or backward without actually including them in the match. Since they do dot have with, replacing them is actually inserting text. Simple example are ^ and $ characters.\nUseful examples # \\zs -Only match your pattern if what’s before the metacharacter \\zs has a match \\ze -Only match your pattern if what’s after the metacharacter \\ze has a match \\\u0026lt; - Match beginning of a word \\\u0026gt; - Match end of a word \\%^ - Match beginning of a file \\%$ - Match end of a file \\%V - Match only in last visual selection "},{"id":39,"href":"/learn-shortcuts/docs/nvim/week-05/","title":"Week 5","section":"Neovim tips","content":" Opening files # More tips for opening files incoming.\nOpen multiple files from inside vim # Similarly to passing wildcards to arguments when opening vim with files you can open multiple files from inside vim. This can be acieved with :ar[gs] \u0026lt;pattern\u0026gt; command.\nFor example all .cpp files is src can be opened with\n:args src/**/*.cpp Nvim Tree # Another very useful option is to use kyazdani42/nvim-tree (or something similar). Some keymappings inside nvim-tree.\nx - cut c - copy p - paste y - copy name \u0026lt;C-V\u0026gt; - open file in vertical split H - toggle visibility of dotfiles ..and more Telescope # Telescope is also very useful when opening files with either find_files or live_grep. Find files is fuzzy finder for files whilst live grep is for searching file by it\u0026rsquo;s context (fuzzy finder for text). My mappings for them\n\u0026lt;Leader\u0026gt;ff - find_files \u0026lt;Leader\u0026gt;fw - live_grep "},{"id":40,"href":"/learn-shortcuts/docs/nvim/week-06/","title":"Week 6","section":"Neovim tips","content":" Macros # It is quite often that we want to repeat some combination of actions multiple times\u0026hellip; And thats exactly what macros are for :D.\nRecording a macro # Recording macro is started with pressing q in normal mode followed by macro name (any lowercase letter). Recording macro can be stopped with pressing q again.\nqa # Record macro named \u0026#34;a\u0026#34; # perform actions q Playing macros # Macro can me played with @{macro-name}. It is also possible to specify how many times the macro should be run.\n@a # Run macro \u0026#34;a\u0026#34; 10@a # Run macro \u0026#34;a\u0026#34; 10 times "},{"id":41,"href":"/learn-shortcuts/docs/nvim/week-07/","title":"Week 7","section":"Neovim tips","content":" Registers # Sometomes you copy a thing.. and then you copy another thing.. but now you want to paste the first one. This is what vim registers are for :D\nDifferent types of registers # Unnamed register \u0026quot;\u0026quot; 10 numbered registers \u0026quot;0..9 The small delete register \u0026quot;- 26 named registers \u0026quot;a..z Three read-only registers \u0026quot;., \u0026quot;%, : Alternate buffer register \u0026quot;# The expression register \u0026quot;= The black hole register \u0026quot;_ The last selection registers \u0026quot;* and \u0026quot;+ Last search pattern register \u0026quot;/ Viewing registers # Show all registers\n:registers # Or simply.. :reg Show specific register\n:reg \u0026lt;register\u0026gt; Accessing registers # Normal mode\n\u0026#34;\u0026lt;reg\u0026gt; \u0026lt;action\u0026gt; \u0026#34;0p # Paste from register \u0026#34;0 Insert mode\n\u0026lt;C-r\u0026gt; \u0026lt;reg\u0026gt; \u0026lt;action\u0026gt; Unnamed register # Yank, delete, substitute and similar commands already use the unnamed register. The unnamed register acts as a default so there is no need to specify it via \u0026quot;\u0026quot;. In other words \u0026quot;\u0026quot;yy and yy both yank line to unnamed register.\nSide note\nMake sure to check out https://www.youtube.com/watch?v=I5QGlfbuCfs for more detailed description! "},{"id":42,"href":"/learn-shortcuts/docs/nvim/week-08/","title":"Week 8","section":"Neovim tips","content":" Registers 1 # We continue with registers by looking at:\n10 numbered registers \u0026quot;0..9 The small delete register \u0026quot;- 26 named registers \u0026quot;a..z Numbered registers # \u0026quot;0 has the last yank \u0026quot;1 has the last delete (d, c, s, x) \u0026quot;2..9 have previous deletes Side note\nNote that %, (), /, n and N (and maybe some more) dont got to delete registers. Small delete register # This register contains the deletes that delete less than one line. This is also somewhat confusing register as some commands don\u0026rsquo;t put stuff there while others do. Don\u0026rsquo;t have any good usecase, but never know :D\nNamed registers # Store whatever you want Macros are stored here automatically You can edit macros by editing contents of these registers Edit macro a with:\nlet @a=\u0026#39;\u0026lt;macro\u0026gt;\u0026#39; Use \u0026lt;C-r\u0026gt;a to access previous macro from \u0026quot;a register in insert mode.\n"},{"id":43,"href":"/learn-shortcuts/docs/nvim/week-09/","title":"Week 9","section":"Neovim tips","content":" Registers 2 # We continue with registers by looking at:\nThree read-only registers \u0026quot;., \u0026quot;%, : Alternate file register \u0026quot;# The expression register \u0026quot;= Readonly registers # \u0026quot;. Last insert mode \u0026quot;% Current file name \u0026quot;: Last Command Some tips to go with current filename:\n%:p -\u0026gt; Make filename full path %:h -\u0026gt; Head of the filename %:t -\u0026gt; Tail of the filename %:r -\u0026gt; Root %:e -\u0026gt; Extension Alternate file register # Register can be accessed via \u0026quot;#. Always contains the filename of the last file you were at. You can quicly switch to last file with \u0026lt;C-^\u0026gt; Otherwise works similraly to current file reg.\nThe expression register # Can be accessed via \u0026quot;=. You can do math and system calls and then paste.\nExamples:\n=123 * 456 =system(\u0026#39;ls \u0026#39;) "}]